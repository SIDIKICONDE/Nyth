# Validation rapide de la configuration des tests core
Write-Host "üîç Validation de la configuration des tests core..." -ForegroundColor Cyan

# V√©rifier les fichiers requis
$requiredFiles = @(
    "test_equalizer.cpp",
    "test_biquad.cpp",
    "test_integration.cpp",
    "test_performance.cpp",
    "Makefile",
    "run_tests.ps1",
    "run_tests.bat",
    "README.md"
)

$missingFiles = @()
foreach ($file in $requiredFiles) {
    if (-not (Test-Path $file)) {
        $missingFiles += $file
    }
}

if ($missingFiles.Count -eq 0) {
    Write-Host "‚úÖ Tous les fichiers de test sont pr√©sents" -ForegroundColor Green
} else {
    Write-Host "‚ùå Fichiers manquants :" -ForegroundColor Red
    foreach ($file in $missingFiles) {
        Write-Host "   - $file" -ForegroundColor Red
    }
    exit 1
}

# V√©rifier que le dossier shared existe
if (Test-Path "../../shared") {
    Write-Host "‚úÖ Dossier shared/Audio/core accessible" -ForegroundColor Green
} else {
    Write-Host "‚ùå Dossier ../../shared non trouv√©" -ForegroundColor Red
    exit 1
}

# V√©rifier la pr√©sence de g++
try {
    $gppVersion = & g++ --version 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Compilateur g++ disponible" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è g++ trouv√© mais version inconnue" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå g++ non trouv√© dans le PATH" -ForegroundColor Red
    Write-Host "Installez GCC ou MinGW pour Windows" -ForegroundColor Yellow
    exit 1
}

# Test de compilation rapide
Write-Host "üî® Test de compilation rapide..." -ForegroundColor Yellow

try {
    # Compiler test_equalizer.cpp
    $compileResult = & g++ -std=c++17 -I../../shared -I. -c test_equalizer.cpp 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ test_equalizer.cpp compile correctement" -ForegroundColor Green
        Remove-Item "test_equalizer.o" -ErrorAction SilentlyContinue
    } else {
        Write-Host "‚ùå Erreur de compilation pour test_equalizer.cpp" -ForegroundColor Red
        Write-Host $compileResult -ForegroundColor Red
        exit 1
    }

    # Compiler test_biquad.cpp
    $compileResult = & g++ -std=c++17 -I../../shared -I. -c test_biquad.cpp 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ test_biquad.cpp compile correctement" -ForegroundColor Green
        Remove-Item "test_biquad.o" -ErrorAction SilentlyContinue
    } else {
        Write-Host "‚ùå Erreur de compilation pour test_biquad.cpp" -ForegroundColor Red
        Write-Host $compileResult -ForegroundColor Red
        exit 1
    }

} catch {
    Write-Host "‚ùå Erreur lors du test de compilation" -ForegroundColor Red
    Write-Host $_.Exception.Message -ForegroundColor Red
    exit 1
}

Write-Host "" -ForegroundColor White
Write-Host "üéâ Configuration valid√©e avec succ√®s !" -ForegroundColor Green
Write-Host "=====================================" -ForegroundColor Green
Write-Host "Vous pouvez maintenant ex√©cuter :" -ForegroundColor White
Write-Host "  .\run_tests.ps1              # Tests complets" -ForegroundColor Cyan
Write-Host "  make test                   # Tests avec Makefile" -ForegroundColor Cyan
Write-Host "  .\run_tests.bat             # Tests avec Batch" -ForegroundColor Cyan
Write-Host "" -ForegroundColor White

Read-Host "Appuyez sur Entr√©e pour continuer"

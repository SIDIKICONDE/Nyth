# Makefile pour tester le module core/
# Tests des fonctionnalit√©s AudioEqualizer et BiquadFilter

CXX = g++
CXXFLAGS = -std=c++20 -Wall -Wextra -I. -I../../ -O2 -pthread
TARGETS = test_core_fixed test_stress_ultra

.PHONY: all clean test help compile-only test-optimized test-cpp20

all: test

help:
	@echo "üß™ TESTS UNITAIRES - MODULE CORE"
	@echo "================================="
	@echo "Commandes disponibles:"
	@echo "  make test         - Ex√©cuter tous les tests"
	@echo "  make clean        - Nettoyer les fichiers temporaires"
	@echo "  make compile-only - Tester la compilation seulement"
	@echo "  make test-optimized - Tester avec optimisations"
	@echo "  make test-cpp20   - Tester compatibilit√© C++20"
	@echo "  make help         - Afficher cette aide"

test: $(TARGETS)
	@echo ""
	@echo "üéØ EX√âCUTION DES TESTS CORE (CORRIG√âS):"
	@echo "======================================="
	@echo ""
	@echo "üìã Testing Core Module (Fixed)..."
	@./test_core_fixed && echo "‚úÖ Core Module (Fixed) - PASSED" || echo "‚ùå Core Module (Fixed) - FAILED"
	@echo ""
	@echo "üî•üî•üî• TESTS DE STRESS ULTRA PUSS√âS üî•üî•üî•"
	@echo "========================================="
	@echo "‚ö†Ô∏è  ATTENTION: Tests tr√®s intensifs, peuvent prendre plusieurs minutes"
	@echo "üìã Testing Ultra Stress Tests..."
	@./test_stress_ultra && echo "‚úÖ Ultra Stress Tests - PASSED" || echo "‚ùå Ultra Stress Tests - FAILED"
	@echo ""
	@echo "üéâ TOUS LES TESTS CORE TERMIN√âS !"
	@echo "================================="
	@echo "üìä BILAN DU MODULE CORE :"
	@echo "   üéõÔ∏è  AudioEqualizer     : √âgaliseur 10 bandes + presets"
	@echo "   üîß BiquadFilter       : 8 types de filtres (lowpass, highpass, etc.)"
	@echo "   üîó Integration        : Coh√©rence entre composants"
	@echo "   ‚ö° Performance        : Traitement temps r√©el optimis√©"
	@echo "   üîí Thread Safety      : Verrous atomiques et RAII"
	@echo ""
	@echo "‚úÖ Code fonctionnel test√©"
	@echo "‚úÖ Int√©gration valid√©e"
	@echo "‚úÖ Stabilit√© v√©rifi√©e"
	@echo "‚úÖ Performance optimis√©e"
	@echo "‚úÖ Thread safety assur√©e"

test_core_fixed: fix_tests.cpp ../../shared/Audio/core/AudioEqualizer.cpp ../../shared/Audio/core/BiquadFilter.cpp
	@echo "üî® Compiling Core Module Fixed test..."
	@$(CXX) $(CXXFLAGS) -o $@ fix_tests.cpp ../../shared/Audio/core/AudioEqualizer.cpp ../../shared/Audio/core/BiquadFilter.cpp

test_stress_ultra: test_stress_ultra.cpp ../../shared/Audio/core/AudioEqualizer.cpp ../../shared/Audio/core/BiquadFilter.cpp
	@echo "üî• Compiling Ultra Stress Tests..."
	@$(CXX) $(CXXFLAGS) -o $@ test_stress_ultra.cpp ../../shared/Audio/core/AudioEqualizer.cpp ../../shared/Audio/core/BiquadFilter.cpp

clean:
	@echo "üßπ Cleaning up core tests..."
	@rm -f $(TARGETS)
	@echo "‚úÖ Clean complete"

# Tests de compilation uniquement (sans ex√©cution)
compile-only: 
	@echo "üî® Testing core compilation only..."
	@$(CXX) $(CXXFLAGS) -c test_audio_equalizer.cpp && echo "‚úÖ AudioEqualizer compiles OK" || echo "‚ùå AudioEqualizer compilation failed"
	@$(CXX) $(CXXFLAGS) -c test_biquad_filter.cpp && echo "‚úÖ BiquadFilter compiles OK" || echo "‚ùå BiquadFilter compilation failed"
	@$(CXX) $(CXXFLAGS) -c test_core_integration.cpp && echo "‚úÖ Core Integration compiles OK" || echo "‚ùå Core Integration compilation failed"
	@rm -f *.o

# Test avec diff√©rents niveaux d'optimisation
test-optimized:
	@echo "‚ö° Testing core with optimization..."
	@$(CXX) $(CXXFLAGS) -O3 -DNDEBUG -o test_audio_equalizer_opt test_audio_equalizer.cpp ../../shared/Audio/core/AudioEqualizer.cpp ../../shared/Audio/core/BiquadFilter.cpp
	@./test_audio_equalizer_opt && echo "‚úÖ AudioEqualizer - Optimized OK"
	@$(CXX) $(CXXFLAGS) -O3 -DNDEBUG -o test_biquad_filter_opt test_biquad_filter.cpp ../../shared/Audio/core/BiquadFilter.cpp
	@./test_biquad_filter_opt && echo "‚úÖ BiquadFilter - Optimized OK"
	@$(CXX) $(CXXFLAGS) -O3 -DNDEBUG -o test_core_integration_opt test_core_integration.cpp ../../shared/Audio/core/AudioEqualizer.cpp ../../shared/Audio/core/BiquadFilter.cpp
	@./test_core_integration_opt && echo "‚úÖ Core Integration - Optimized OK"
	@rm -f *_opt

# Test de compatibilit√© C++20
test-cpp20:
	@echo "üîÑ Testing C++20 compatibility for core..."
	@$(CXX) -std=c++20 -Wall -Wextra -I. -I../../ -o test_audio_equalizer_20 test_audio_equalizer.cpp ../../shared/Audio/core/AudioEqualizer.cpp ../../shared/Audio/core/BiquadFilter.cpp && echo "‚úÖ AudioEqualizer C++20 compatible" || echo "‚ö†Ô∏è AudioEqualizer C++20 incompatible"
	@$(CXX) -std=c++20 -Wall -Wextra -I. -I../../ -o test_biquad_filter_20 test_biquad_filter.cpp ../../shared/Audio/core/BiquadFilter.cpp && echo "‚úÖ BiquadFilter C++20 compatible" || echo "‚ö†Ô∏è BiquadFilter C++20 incompatible"
	@$(CXX) -std=c++20 -Wall -Wextra -I. -I../../ -o test_core_integration_20 test_core_integration.cpp ../../shared/Audio/core/AudioEqualizer.cpp ../../shared/Audio/core/BiquadFilter.cpp && echo "‚úÖ Core Integration C++20 compatible" || echo "‚ö†Ô∏è Core Integration C++20 incompatible"
	@rm -f *_20

# Test de debug avec informations d√©taill√©es
test-debug:
	@echo "üêõ Testing core with debug info..."
	@$(CXX) $(CXXFLAGS) -g -DDEBUG -o test_audio_equalizer_debug test_audio_equalizer.cpp ../../shared/Audio/core/AudioEqualizer.cpp ../../shared/Audio/core/BiquadFilter.cpp
	@$(CXX) $(CXXFLAGS) -g -DDEBUG -o test_biquad_filter_debug test_biquad_filter.cpp ../../shared/Audio/core/BiquadFilter.cpp
	@$(CXX) $(CXXFLAGS) -g -DDEBUG -o test_core_integration_debug test_core_integration.cpp ../../shared/Audio/core/AudioEqualizer.cpp ../../shared/Audio/core/BiquadFilter.cpp
	@echo "‚úÖ Debug builds created"
	@rm -f *_debug

# Test avec analyseur statique (si disponible)
test-analyze:
	@echo "üîç Running static analysis on core..."
	@which clang-tidy > /dev/null 2>&1 && clang-tidy test_*.cpp -- $(CXXFLAGS) || echo "‚ö†Ô∏è clang-tidy not available"
	@which cppcheck > /dev/null 2>&1 && cppcheck --enable=all --std=c++20 test_*.cpp || echo "‚ö†Ô∏è cppcheck not available"

# Test de couverture (si gcov disponible)
test-coverage:
	@echo "üìä Testing code coverage for core..."
	@$(CXX) $(CXXFLAGS) --coverage -o test_audio_equalizer_cov test_audio_equalizer.cpp ../../shared/Audio/core/AudioEqualizer.cpp ../../shared/Audio/core/BiquadFilter.cpp
	@./test_audio_equalizer_cov
	@which gcov > /dev/null 2>&1 && gcov test_audio_equalizer.cpp || echo "‚ö†Ô∏è gcov not available"
	@rm -f *_cov *.gcda *.gcno *.gcov

# Nettoyage complet incluant fichiers temporaires de debug
clean-all: clean
	@rm -f *.o *.gcda *.gcno *.gcov *_opt *_20 *_debug *_cov
	@echo "‚úÖ Complete cleanup done"

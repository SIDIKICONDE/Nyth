#!/bin/bash

# Script de build pour les tests de stress mobiles
# Usage: ./build_mobile.sh [android|ios|force]

set -e

echo "üîß Build des tests de stress pour mobile"
echo "======================================="

# D√©terminer la plateforme cible
PLATFORM=""
FORCE_MOBILE=""
CXX_FLAGS="-std=c++20 -O2 -DNDEBUG"
INCLUDES="-I../../shared -I../../shared/Audio/core"
SOURCES="test_stress_ultra.cpp ../../shared/Audio/core/AudioEqualizer.cpp ../../shared/Audio/core/BiquadFilter.cpp"
OUTPUT="test_stress_mobile"

case "$1" in
    "android")
        echo "üì± Configuration Android"
        PLATFORM="Android"
        CXX_FLAGS="$CXX_FLAGS -D__ANDROID__"
        # Pour Android NDK, utiliser le compilateur appropri√©
        if [ ! -z "$ANDROID_NDK" ]; then
            CXX="$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang++"
        else
            echo "‚ö†Ô∏è  ANDROID_NDK non d√©fini, utilisation du compilateur syst√®me"
            CXX="g++"
        fi
        ;;
    "ios")
        echo "üì± Configuration iOS"
        PLATFORM="iOS"
        CXX_FLAGS="$CXX_FLAGS -D__IPHONE_OS_VERSION_MIN_REQUIRED=140000"
        # Pour iOS, utiliser clang avec les bons flags
        CXX="clang++"
        CXX_FLAGS="$CXX_FLAGS -arch arm64 -isysroot $(xcrun --show-sdk-path --sdk iphoneos)"
        ;;
    "force")
        echo "üì± Configuration mobile forc√©e (desktop)"
        PLATFORM="Mobile (forc√©)"
        CXX_FLAGS="$CXX_FLAGS -DFORCE_MOBILE_CONFIG"
        CXX="g++"
        ;;
    *)
        echo "üì± Configuration mobile auto-d√©tect√©e"
        PLATFORM="Auto"
        CXX="g++"
        ;;
esac

echo "   Plateforme: $PLATFORM"
echo "   Compilateur: $CXX"
echo "   Flags: $CXX_FLAGS"
echo ""

# V√©rifier que les fichiers sources existent
echo "üîç V√©rification des fichiers sources..."
for file in $SOURCES; do
    if [ ! -f "$file" ]; then
        echo "‚ùå Fichier manquant: $file"
        exit 1
    fi
done
echo "‚úÖ Tous les fichiers sources trouv√©s"

# Compilation
echo ""
echo "üî® Compilation en cours..."
echo "Commande: $CXX $CXX_FLAGS $INCLUDES $SOURCES -o $OUTPUT"

if $CXX $CXX_FLAGS $INCLUDES $SOURCES -o $OUTPUT; then
    echo "‚úÖ Compilation r√©ussie!"
    echo ""
    
    # Afficher les informations sur l'ex√©cutable
    if [ -f "$OUTPUT" ]; then
        echo "üìä Informations sur l'ex√©cutable:"
        ls -lh "$OUTPUT"
        echo ""
        
        # Test rapide de l'ex√©cutable (seulement si on peut l'ex√©cuter)
        if [[ "$1" != "android" && "$1" != "ios" ]]; then
            echo "üß™ Test rapide de l'ex√©cutable..."
            echo "   (Interruption apr√®s 10 secondes si n√©cessaire)"
            
            # Lancer le test avec un timeout
            if timeout 10s ./$OUTPUT > /dev/null 2>&1; then
                echo "‚úÖ Test rapide r√©ussi!"
            else
                echo "‚ö†Ô∏è  Test rapide interrompu (normal pour les longs tests)"
            fi
        else
            echo "üì± Ex√©cutable cross-compil√© - pas de test local possible"
        fi
        
        echo ""
        echo "üéØ Build termin√© avec succ√®s!"
        echo "   Ex√©cutable: ./$OUTPUT"
        
        if [[ "$1" == "android" || "$1" == "ios" ]]; then
            echo "   ‚ö†Ô∏è  Transf√©rer l'ex√©cutable sur l'appareil cible pour l'ex√©cuter"
        else
            echo "   Lancer avec: ./$OUTPUT"
        fi
        
    else
        echo "‚ùå Erreur: ex√©cutable non trouv√© apr√®s compilation"
        exit 1
    fi
else
    echo "‚ùå Erreur de compilation"
    exit 1
fi

echo ""
echo "üì± Configuration mobile utilis√©e:"
echo "   ‚Ä¢ Buffers r√©duits (64K-256K √©chantillons)"
echo "   ‚Ä¢ It√©rations r√©duites (1000 vs 10000)"
echo "   ‚Ä¢ M√©moire limit√©e (10MB vs 100MB)"
echo "   ‚Ä¢ Tests sp√©cifiques mobiles inclus"
echo "   ‚Ä¢ Optimisations pour √©conomie d'√©nergie"

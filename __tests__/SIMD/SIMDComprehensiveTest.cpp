#include "../../shared/Audio/common/SIMD/SIMDCore.hpp"
#include "../../shared/Audio/common/SIMD/SIMDMathFunctions.hpp"
#include "../../shared/Audio/common/SIMD/SIMDIntegration.hpp"
#include <iostream>
#include <iomanip>
#include <vector>
#include <chrono>
#include <cmath>
#include <random>
#include <cassert>

// Macro pour les tests
#define TEST_ASSERT(condition, message) \
    do { \
        if (!(condition)) { \
            std::cout << "‚ùå TEST FAILED: " << message << std::endl; \
            return false; \
        } \
    } while(0)

#define TEST_SUCCESS(message) \
    std::cout << "‚úÖ " << message << std::endl

#define PERFORMANCE_TEST(func, name, iterations) \
    do { \
        auto start = std::chrono::high_resolution_clock::now(); \
        for (int i = 0; i < iterations; ++i) { func; } \
        auto end = std::chrono::high_resolution_clock::now(); \
        double time = std::chrono::duration<double, std::milli>(end - start).count(); \
        std::cout << "‚è±Ô∏è  " << name << ": " << std::fixed << std::setprecision(2) << time << "ms" << std::endl; \
    } while(0)

// G√©n√©rateur de nombres al√©atoires
class RandomGenerator {
private:
    std::mt19937 gen;
    std::uniform_real_distribution<float> dist;

public:
    RandomGenerator(float min = -1.0f, float max = 1.0f)
        : gen(std::random_device{}()), dist(min, max) {}

    float next() { return dist(gen); }

    void fillArray(float* array, size_t size) {
        for (size_t i = 0; i < size; ++i) {
            array[i] = next();
        }
    }

    std::vector<float> generate(size_t size) {
        std::vector<float> result(size);
        fillArray(result.data(), size);
        return result;
    }
};

namespace AudioNR {
namespace SIMD {
namespace Tests {

// Test de la d√©tection SIMD
bool testSIMDDetection() {
    std::cout << "\nüîç === TEST DE D√âTECTION SIMD ===" << std::endl;

    bool hasSIMD = SIMDDetector::hasSIMD();
    bool hasNEON = SIMDDetector::hasNEON();

    TEST_SUCCESS("D√©tection SIMD: " + std::string(hasSIMD ? "DISPONIBLE" : "INDISPONIBLE"));
    TEST_SUCCESS("D√©tection NEON: " + std::string(hasNEON ? "DISPONIBLE" : "INDISPONIBLE"));
    TEST_SUCCESS("Type SIMD recommand√©: " + SIMDDetector::getBestSIMDType());
    TEST_SUCCESS("Taille du vecteur: " + std::to_string(SIMDDetector::getVectorSize()) + " floats");

    return true;
}

// Test des fonctions math√©matiques de base
bool testBasicMathFunctions() {
    std::cout << "\nüßÆ === TEST FONCTIONS MATH√âMATIQUES DE BASE ===" << std::endl;

    const size_t TEST_SIZE = 1024;
    RandomGenerator rand(-1.0f, 1.0f);

    auto a = rand.generate(TEST_SIZE);
    auto b = rand.generate(TEST_SIZE);
    auto result = std::vector<float>(TEST_SIZE);

    // Test ADD
    SIMDMath::add(result.data(), a.data(), b.data(), TEST_SIZE);
    bool addCorrect = true;
    for (size_t i = 0; i < 10; ++i) {
        if (std::abs(result[i] - (a[i] + b[i])) > 1e-6f) {
            addCorrect = false;
            break;
        }
    }
    TEST_ASSERT(addCorrect, "Addition SIMD incorrecte");
    TEST_SUCCESS("Addition SIMD - OK");

    // Test MULTIPLY
    SIMDMath::multiply(result.data(), a.data(), b.data(), TEST_SIZE);
    bool mulCorrect = true;
    for (size_t i = 0; i < 10; ++i) {
        if (std::abs(result[i] - (a[i] * b[i])) > 1e-6f) {
            mulCorrect = false;
            break;
        }
    }
    TEST_ASSERT(mulCorrect, "Multiplication SIMD incorrecte");
    TEST_SUCCESS("Multiplication SIMD - OK");

    // Test SUM
    float sum = SIMDMath::sum(a.data(), TEST_SIZE);
    float expectedSum = 0.0f;
    for (size_t i = 0; i < TEST_SIZE; ++i) {
        expectedSum += a[i];
    }
    TEST_ASSERT(std::abs(sum - expectedSum) < 1e-5f, "Somme SIMD incorrecte");
    TEST_SUCCESS("Somme SIMD - OK (r√©sultat: " + std::to_string(sum) + ")");

    // Test MAX
    float maxVal = SIMDMath::max(a.data(), TEST_SIZE);
    float expectedMax = -INFINITY;
    for (size_t i = 0; i < TEST_SIZE; ++i) {
        expectedMax = std::max(expectedMax, a[i]);
    }
    TEST_ASSERT(std::abs(maxVal - expectedMax) < 1e-6f, "Maximum SIMD incorrect");
    TEST_SUCCESS("Maximum SIMD - OK (r√©sultat: " + std::to_string(maxVal) + ")");

    // Test RMS
    float rms = SIMDMath::rms(a.data(), TEST_SIZE);
    float expectedRMS = std::sqrt(expectedSum * expectedSum / TEST_SIZE);
    TEST_ASSERT(std::abs(rms - expectedRMS) < 1e-5f, "RMS SIMD incorrect");
    TEST_SUCCESS("RMS SIMD - OK (r√©sultat: " + std::to_string(rms) + ")");

    return true;
}

// Test des fonctions math√©matiques avanc√©es
bool testAdvancedMathFunctions() {
    std::cout << "\nüî¨ === TEST FONCTIONS MATH√âMATIQUES AVANC√âES ===" << std::endl;

    const size_t TEST_SIZE = 512;
    RandomGenerator rand(0.1f, 10.0f);

    auto x = rand.generate(TEST_SIZE);
    auto result = std::vector<float>(TEST_SIZE);

    // Test expint_e1
    SIMDMathFunctions::expint_e1_vectorized(x.data(), result.data(), TEST_SIZE);

    bool expintCorrect = true;
    for (size_t i = 0; i < 10; ++i) {
        float expected = SIMDMathFunctions::expint_e1_scalar(x[i]);
        if (std::abs(result[i] - expected) > 1e-4f) {
            expintCorrect = false;
            break;
        }
    }
    TEST_ASSERT(expintCorrect, "expint_e1 vectoris√© incorrect");
    TEST_SUCCESS("expint_e1 vectoris√© - OK");

    // Test des fonctions trigonom√©triques
    RandomGenerator randTrig(-M_PI, M_PI);
    auto angles = randTrig.generate(TEST_SIZE);

    SIMDMathFunctions::sin_vectorized(angles.data(), result.data(), TEST_SIZE);
    bool sinCorrect = true;
    for (size_t i = 0; i < 10; ++i) {
        float expected = std::sin(angles[i]);
        if (std::abs(result[i] - expected) > 1e-3f) {
            sinCorrect = false;
            break;
        }
    }
    TEST_ASSERT(sinCorrect, "sin vectoris√© incorrect");
    TEST_SUCCESS("sin vectoris√© - OK");

    // Test tanh
    SIMDMathFunctions::tanh_vectorized(angles.data(), result.data(), TEST_SIZE);
    bool tanhCorrect = true;
    for (size_t i = 0; i < 10; ++i) {
        float expected = std::tanh(angles[i]);
        if (std::abs(result[i] - expected) > 1e-3f) {
            tanhCorrect = false;
            break;
        }
    }
    TEST_ASSERT(tanhCorrect, "tanh vectoris√© incorrect");
    TEST_SUCCESS("tanh vectoris√© - OK");

    return true;
}

// Test de la gestion m√©moire align√©e
bool testMemoryManagement() {
    std::cout << "\nüíæ === TEST GESTION M√âMOIRE ALIGN√âE ===" << std::endl;

    const size_t TEST_SIZE = 2048;

    // Test allocation align√©e
    float* alignedBuffer = AlignedMemory::allocate<float>(TEST_SIZE);
    TEST_ASSERT(alignedBuffer != nullptr, "Allocation align√©e √©chou√©e");
    TEST_SUCCESS("Allocation align√©e - OK");

    // Test v√©rification d'alignement
    bool isAligned = AlignedMemory::isAligned(alignedBuffer);
    TEST_ASSERT(isAligned, "Buffer non align√©");
    TEST_SUCCESS("V√©rification d'alignement - OK");

    // Test utilisation avec SIMD
    RandomGenerator rand;
    rand.fillArray(alignedBuffer, TEST_SIZE);

    // Test que les op√©rations SIMD fonctionnent avec la m√©moire align√©e
    float sum = SIMDMath::sum(alignedBuffer, TEST_SIZE);
    TEST_ASSERT(!std::isnan(sum) && !std::isinf(sum), "Somme avec m√©moire align√©e produite NaN/Inf");
    TEST_SUCCESS("Op√©rations SIMD avec m√©moire align√©e - OK");

    // Test deallocate
    AlignedMemory::deallocate(alignedBuffer);
    TEST_SUCCESS("D√©sallocation align√©e - OK");

    return true;
}

// Test des utilitaires SIMD
bool testSIMDUtils() {
    std::cout << "\nüîß === TEST UTILITAIRES SIMD ===" << std::endl;

    const size_t TEST_SIZE = 1024;
    RandomGenerator rand(-0.9f, 0.9f);

    auto data = rand.generate(TEST_SIZE);

    // Test applyGain
    std::vector<float> gainData = data;
    SIMDUtils::applyGain(gainData.data(), TEST_SIZE, 2.0f);

    bool gainCorrect = true;
    for (size_t i = 0; i < 10; ++i) {
        if (std::abs(gainData[i] - data[i] * 2.0f) > 1e-6f) {
            gainCorrect = false;
            break;
        }
    }
    TEST_ASSERT(gainCorrect, "Application de gain incorrecte");
    TEST_SUCCESS("Application de gain - OK");

    // Test clamp
    std::vector<float> clampData = data;
    SIMDUtils::clamp(clampData.data(), TEST_SIZE, -0.5f, 0.5f);

    bool clampCorrect = true;
    for (size_t i = 0; i < TEST_SIZE; ++i) {
        float expected = std::max(-0.5f, std::min(0.5f, data[i]));
        if (std::abs(clampData[i] - expected) > 1e-6f) {
            clampCorrect = false;
            break;
        }
    }
    TEST_ASSERT(clampCorrect, "Clamp incorrect");
    TEST_SUCCESS("Clamp - OK");

    // Test mixFloat32
    std::vector<float> input2 = rand.generate(TEST_SIZE);
    std::vector<float> mixed(TEST_SIZE);

    SIMDUtils::mixFloat32(data.data(), input2.data(), mixed.data(), TEST_SIZE, 0.7f, 0.3f);

    bool mixCorrect = true;
    for (size_t i = 0; i < 10; ++i) {
        float expected = data[i] * 0.7f + input2[i] * 0.3f;
        if (std::abs(mixed[i] - expected) > 1e-6f) {
            mixCorrect = false;
            break;
        }
    }
    TEST_ASSERT(mixCorrect, "Mixage audio incorrect");
    TEST_SUCCESS("Mixage audio - OK");

    return true;
}

// Test des processeurs DSP SIMD
bool testDSPProcessors() {
    std::cout << "\nüéµ === TEST PROCESSEURS DSP SIMD ===" << std::endl;

    const size_t TEST_SIZE = 2048;
    RandomGenerator rand(-0.8f, 0.8f);

    auto data = rand.generate(TEST_SIZE);

    // Test SIMDFilter
    SIMDFilter lowpass(SIMDFilter::LOWPASS, 1000.0f, 0.707f);
    TEST_ASSERT(lowpass.isSIMDAccelerated(), "Filtre pas acc√©l√©r√© SIMD");
    TEST_SUCCESS("SIMDFilter - OK");

    std::vector<float> filtered = data;
    lowpass.process(filtered.data(), TEST_SIZE);
    TEST_SUCCESS("Traitement filtre passe-bas - OK");

    // Test SIMDDistortion
    SIMDDistortion tanhDistortion(SIMDDistortion::TANH, 2.0f, 0.8f);
    TEST_ASSERT(tanhDistortion.isSIMDAccelerated(), "Distortion pas acc√©l√©r√©e SIMD");
    TEST_SUCCESS("SIMDDistortion - OK");

    std::vector<float> distorted = data;
    tanhDistortion.process(distorted.data(), TEST_SIZE);
    TEST_SUCCESS("Traitement distortion tanh - OK");

    // Test SIMDReverb
    SIMDReverb reverb(0.4f, 0.3f, 0.6f);
    TEST_ASSERT(reverb.isSIMDAccelerated(), "Reverb pas acc√©l√©r√©e SIMD");
    TEST_SUCCESS("SIMDReverb - OK");

    std::vector<float> reverbed = data;
    reverb.process(reverbed.data(), TEST_SIZE);
    TEST_SUCCESS("Traitement reverb - OK");

    // Test SIMDDelay
    SIMDDelay delay(200.0f, 0.2f, 0.4f);
    TEST_ASSERT(delay.isSIMDAccelerated(), "Delay pas acc√©l√©r√© SIMD");
    TEST_SUCCESS("SIMDDelay - OK");

    std::vector<float> delayed = data;
    delay.process(delayed.data(), TEST_SIZE);
    TEST_SUCCESS("Traitement delay - OK");

    return true;
}

// Test des benchmarks
bool testBenchmarks() {
    std::cout << "\nüìä === TEST BENCHMARKS ===" << std::endl;

    const size_t BENCHMARK_SIZE = 100000;
    RandomGenerator rand(-1.0f, 1.0f);

    auto data = rand.generate(BENCHMARK_SIZE);
    auto result = std::vector<float>(BENCHMARK_SIZE);

    std::cout << "Benchmark avec " << BENCHMARK_SIZE << " √©chantillons:" << std::endl;

    // Benchmark addition
    PERFORMANCE_TEST(
        SIMDMath::add(result.data(), data.data(), data.data(), BENCHMARK_SIZE),
        "Addition SIMD", 1000
    );

    // Benchmark multiplication
    PERFORMANCE_TEST(
        SIMDMath::multiply(result.data(), data.data(), data.data(), BENCHMARK_SIZE),
        "Multiplication SIMD", 1000
    );

    // Benchmark somme
    PERFORMANCE_TEST(
        volatile float s = SIMDMath::sum(data.data(), BENCHMARK_SIZE),
        "Somme SIMD", 1000
    );

    // Benchmark sin vectoris√©
    std::vector<float> angles(BENCHMARK_SIZE);
    for (size_t i = 0; i < BENCHMARK_SIZE; ++i) {
        angles[i] = (static_cast<float>(i) / BENCHMARK_SIZE) * 2.0f * M_PI;
    }

    PERFORMANCE_TEST(
        SIMDMathFunctions::sin_vectorized(angles.data(), result.data(), BENCHMARK_SIZE),
        "Sin vectoris√©", 100
    );

    // Benchmark tanh vectoris√©
    PERFORMANCE_TEST(
        SIMDMathFunctions::tanh_vectorized(data.data(), result.data(), BENCHMARK_SIZE),
        "Tanh vectoris√©", 100
    );

    return true;
}

// Test de pr√©cision
bool testPrecision() {
    std::cout << "\nüéØ === TEST PR√âCISION ===" << std::endl;

    const size_t TEST_SIZE = 10000;
    RandomGenerator rand(-10.0f, 10.0f);

    auto data = rand.generate(TEST_SIZE);
    auto result = std::vector<float>(TEST_SIZE);

    // Test pr√©cision des fonctions math√©matiques
    float maxErrorSin = 0.0f;
    float maxErrorTanh = 0.0f;
    float maxErrorExpint = 0.0f;

    for (size_t i = 0; i < TEST_SIZE; ++i) {
        float x = data[i];

        // Test sin
        result[i] = std::sin(x);
        float sinApprox = LookupTables::getInstance().fastSin(x);
        maxErrorSin = std::max(maxErrorSin, std::abs(result[i] - sinApprox));

        // Test tanh
        result[i] = std::tanh(x);
        SIMDMathFunctions::tanh_vectorized(&x, &sinApprox, 1);
        maxErrorTanh = std::max(maxErrorTanh, std::abs(result[i] - sinApprox));

        // Test expint_e1 (pour valeurs positives)
        if (x > 0) {
            result[i] = SIMDMathFunctions::expint_e1_scalar(x);
            SIMDMathFunctions::expint_e1_vectorized(&x, &sinApprox, 1);
            maxErrorExpint = std::max(maxErrorExpint, std::abs(result[i] - sinApprox));
        }
    }

    std::cout << "Pr√©cision des approximations:" << std::endl;
    std::cout << "  Sin (LUT): erreur max = " << std::scientific << maxErrorSin << std::endl;
    std::cout << "  Tanh: erreur max = " << std::scientific << maxErrorTanh << std::endl;
    std::cout << "  Expint_e1: erreur max = " << std::scientific << maxErrorExpint << std::endl;

    // V√©rifier que la pr√©cision est acceptable pour l'audio
    TEST_ASSERT(maxErrorSin < 0.01f, "Pr√©cision sin trop faible");
    TEST_ASSERT(maxErrorTanh < 0.01f, "Pr√©cision tanh trop faible");
    TEST_SUCCESS("Pr√©cision des approximations - OK");

    return true;
}

// Test de l'int√©gration
bool testIntegration() {
    std::cout << "\nüîó === TEST INT√âGRATION ===" << std::endl;

    // Test SIMDIntegration
    std::string info = SIMDIntegration::getSIMDMathInfo();
    TEST_SUCCESS("Informations SIMD: " + info);

    bool isAvailable = SIMDIntegration::isSIMDMathAvailable();
    TEST_SUCCESS("SIMD disponible: " + std::string(isAvailable ? "Oui" : "Non"));

    // Test enable/disable
    SIMDIntegration::enableSIMDAcceleration(true);
    bool isEnabled = SIMDIntegration::isSIMDAccelerationEnabled();
    TEST_ASSERT(isEnabled, "Acc√©l√©ration SIMD non activ√©e");
    TEST_SUCCESS("Activation SIMD - OK");

    // Test expint_with_simd
    float testValue = 2.0f;
    float result = SIMDIntegration::expint_with_simd(testValue);
    TEST_ASSERT(!std::isnan(result) && !std::isinf(result), "expint_with_simd retourne NaN/Inf");
    TEST_SUCCESS("expint_with_simd - OK (r√©sultat: " + std::to_string(result) + ")");

    // Test expint_vectorized
    const size_t TEST_SIZE = 1024;
    RandomGenerator rand(0.1f, 5.0f);
    auto x = rand.generate(TEST_SIZE);
    auto resultVec = std::vector<float>(TEST_SIZE);

    SIMDIntegration::expint_vectorized(x.data(), resultVec.data(), TEST_SIZE);

    bool vectorizedCorrect = true;
    for (size_t i = 0; i < 10; ++i) {
        if (std::isnan(resultVec[i]) || std::isinf(resultVec[i])) {
            vectorizedCorrect = false;
            break;
        }
    }
    TEST_ASSERT(vectorizedCorrect, "expint_vectorized retourne NaN/Inf");
    TEST_SUCCESS("expint_vectorized - OK");

    // Test benchmark int√©gr√©
    SIMDIntegration::runMathUtilsSIMDBenchmark(10000);
    TEST_SUCCESS("Benchmark int√©gr√© - OK");

    return true;
}

// Test du gestionnaire SIMD
bool testSIMDManager() {
    std::cout << "\n‚öôÔ∏è  === TEST GESTIONNAIRE SIMD ===" << std::endl;

    // Test initialisation
    SIMDManager::getInstance().initialize();
    TEST_ASSERT(SIMDManager::getInstance().isInitialized(), "Gestionnaire non initialis√©");
    TEST_SUCCESS("Initialisation gestionnaire - OK");

    // Test informations
    std::string info = SIMDManager::getInstance().getSIMDInfo();
    TEST_SUCCESS("Informations gestionnaire: " + info);

    // Test benchmark
    SIMDManager::getInstance().runBenchmark(50000);
    TEST_SUCCESS("Benchmark gestionnaire - OK");

    return true;
}

// Fonction principale de test
bool runAllTests() {
    std::cout << "üöÄ === TESTS COMPL√âMENTAIRES BIBLIOTH√àQUE SIMD ===\n" << std::endl;

    bool allPassed = true;

    try {
        // Test de d√©tection SIMD
        if (!testSIMDDetection()) allPassed = false;

        // Test fonctions math√©matiques de base
        if (!testBasicMathFunctions()) allPassed = false;

        // Test fonctions math√©matiques avanc√©es
        if (!testAdvancedMathFunctions()) allPassed = false;

        // Test gestion m√©moire
        if (!testMemoryManagement()) allPassed = false;

        // Test utilitaires
        if (!testSIMDUtils()) allPassed = false;

        // Test processeurs DSP
        if (!testDSPProcessors()) allPassed = false;

        // Test benchmarks
        if (!testBenchmarks()) allPassed = false;

        // Test pr√©cision
        if (!testPrecision()) allPassed = false;

        // Test int√©gration
        if (!testIntegration()) allPassed = false;

        // Test gestionnaire
        if (!testSIMDManager()) allPassed = false;

    } catch (const std::exception& e) {
        std::cout << "‚ùå EXCEPTION CAPTUR√âE: " << e.what() << std::endl;
        allPassed = false;
    } catch (...) {
        std::cout << "‚ùå EXCEPTION INCONNUE CAPTUR√âE" << std::endl;
        allPassed = false;
    }

    // R√©sum√© final
    std::cout << "\n" << (allPassed ? "üéâ" : "üí•") << " === R√âSUM√â FINAL === " << (allPassed ? "üéâ" : "üí•") << std::endl;
    std::cout << (allPassed ? "‚úÖ TOUS LES TESTS R√âUSSIS" : "‚ùå CERTAINS TESTS ONT √âCHOU√â") << std::endl;
    std::cout << "üìä Tests termin√©s √† " << std::fixed << std::setprecision(1)
              << (static_cast<double>(std::chrono::system_clock::now().time_since_epoch().count()) /
                  std::chrono::system_clock::period::den * 1000) << "ms" << std::endl;

    return allPassed;
}

} // namespace Tests
} // namespace SIMD
} // namespace AudioNR

// Point d'entr√©e pour les tests
int main() {
    std::cout << "üß™ SYST√àME DE TEST COMPL√âMENTAIRE BIBLIOTH√àQUE SIMD\n" << std::endl;
    std::cout << "Test r√©alis√© le: " << __DATE__ << " " << __TIME__ << "\n" << std::endl;

    bool success = AudioNR::SIMD::Tests::runAllTests();

    return success ? 0 : 1;
}

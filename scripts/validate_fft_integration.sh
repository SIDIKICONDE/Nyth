#!/bin/bash

# Script de validation rapide pour CI/CD
# V√©rifie l'int√©gration du module FFT

set -e

echo "üîç Validation rapide de l'int√©gration FFT pour CI"
echo "==============================================="

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# Test 1: V√©rification des fichiers critiques
test_files_exist() {
    echo "üìÅ Test: Fichiers critiques pr√©sents"

    local critical_files=(
        "shared/Audio/fft/NativeAudioSpectrumModule.h"
        "shared/Audio/fft/NativeAudioSpectrumModule.cpp"
        "shared/Audio/fft/managers/SpectrumManager.h"
        "shared/Audio/fft/managers/SpectrumManager.cpp"
        "shared/Audio/fft/config/SpectrumConfig.h"
        "specs/NativeAudioSpectrumModule.ts"
    )

    for file in "${critical_files[@]}"; do
        if [[ ! -f "$file" ]]; then
            log_error "Fichier critique manquant: $file"
            return 1
        fi
    done

    log_success "Tous les fichiers critiques sont pr√©sents"
    return 0
}

# Test 2: V√©rification des corrections de compilation
test_compilation_fixes() {
    echo "üîß Test: Corrections de compilation appliqu√©es"

    # V√©rifier l'absence de using declarations probl√©matiques
    if grep -q "^using [A-Z]" shared/Audio/fft/NativeAudioSpectrumModule.cpp; then
        log_error "Using declarations non qualifi√©s pr√©sents"
        return 1
    fi

    # V√©rifier les appels qualifi√©s
    if grep -q "return stateToString(state);" shared/Audio/fft/NativeAudioSpectrumModule.cpp; then
        log_error "Appel r√©cursif stateToString non corrig√©"
        return 1
    fi

    if grep -q "return errorToString(error);" shared/Audio/fft/NativeAudioSpectrumModule.cpp; then
        log_error "Appel r√©cursif errorToString non corrig√©"
        return 1
    fi

    # V√©rifier ArrayView correctement initialis√©
    if ! grep -q "Nyth::Audio::ArrayView<float>(magnitudesBuffer_.data(), config_.numBands)" shared/Audio/fft/managers/SpectrumManager.cpp; then
        log_error "ArrayView magnitudes mal initialis√©"
        return 1
    fi

    log_success "Corrections de compilation valid√©es"
    return 0
}

# Test 3: V√©rification de l'API JSI
test_jsi_api() {
    echo "üîó Test: API JSI correctement expos√©e"

    local module_file="shared/Audio/fft/NativeAudioSpectrumModule.cpp"

    # V√©rifier que getState renvoie un nombre
    if ! grep -q "return jsi::Value(static_cast<int>(currentState_.load()));" "$module_file"; then
        log_error "getState ne renvoie pas un nombre"
        return 1
    fi

    # V√©rifier que processAudioBuffer renvoie un bool√©en
    if ! grep -q "return jsi::Value(success);" "$module_file"; then
        log_error "processAudioBuffer ne renvoie pas un bool√©en"
        return 1
    fi

    # V√©rifier dispose alias
    if ! grep -q 'return module->release(rt);' "$module_file"; then
        log_error "dispose n'est pas un alias de release"
        return 1
    fi

    # V√©rifier validateConfig expos√©
    if ! grep -q 'validateConfig.*module->validateConfig' "$module_file"; then
        log_error "validateConfig non expos√©"
        return 1
    fi

    log_success "API JSI correctement expos√©e"
    return 0
}

# Test 4: V√©rification des callbacks
test_callbacks() {
    echo "üì° Test: Callbacks correctement impl√©ment√©s"

    local module_file="shared/Audio/fft/NativeAudioSpectrumModule.cpp"

    # V√©rifier callback error avec 2 arguments
    if ! grep -q "jsi::Value(static_cast<int>(error))," "$module_file"; then
        log_error "Callback error n'a pas 2 arguments"
        return 1
    fi

    # V√©rifier callback stateChange avec 2 arguments
    if ! grep -q "jsi::Value(static_cast<int>(oldState))," "$module_file"; then
        log_error "Callback stateChange n'a pas 2 arguments"
        return 1
    fi

    # V√©rifier JSICallbackManager support multi-args
    if ! grep -q "args.size() == 2" shared/Audio/common/jsi/JSICallbackManager.cpp; then
        log_error "JSICallbackManager ne supporte pas 2 arguments"
        return 1
    fi

    log_success "Callbacks correctement impl√©ment√©s"
    return 0
}

# Test 5: V√©rification des includes
test_includes() {
    echo "üìã Test: Includes correctement corrig√©s"

    # V√©rifier include JSICallbackManager
    if grep -q '"../../../common/jsi/JSICallbackManager.h"' shared/Audio/fft/NativeAudioSpectrumModule.h; then
        log_error "Include JSICallbackManager incorrect"
        return 1
    fi

    if ! grep -q '"../common/jsi/JSICallbackManager.h"' shared/Audio/fft/NativeAudioSpectrumModule.h; then
        log_error "Include JSICallbackManager manquant ou incorrect"
        return 1
    fi

    # V√©rifier include FFTEngine
    if grep -q '"../../../common/dsp/FFTEngine.hpp"' shared/Audio/fft/components/SpectrumComponentFactory.cpp; then
        log_error "Include FFTEngine incorrect"
        return 1
    fi

    log_success "Includes correctement corrig√©s"
    return 0
}

# Test 6: V√©rification iOS
test_ios() {
    echo "üçé Test: Int√©gration iOS"

    local provider_file="ios/Nyth/NativeModuleProvider.mm"

    if [[ ! -f "$provider_file" ]]; then
        log_warning "Fichier iOS non trouv√©, test ignor√©"
        return 0
    fi

    # V√©rifier absence d'include vide
    if grep -q "#include $" "$provider_file"; then
        log_error "Include vide trouv√© dans NativeModuleProvider.mm"
        return 1
    fi

    # V√©rifier include vector pr√©sent
    if ! grep -q "#include <vector>" "$provider_file"; then
        log_error "Include <vector> manquant"
        return 1
    fi

    log_success "Int√©gration iOS valid√©e"
    return 0
}

# Test 7: V√©rification Android
test_android() {
    echo "ü§ñ Test: Int√©gration Android"

    local cmake_file="android/app/src/main/jni/CMakeLists.txt"

    if [[ ! -f "$cmake_file" ]]; then
        log_warning "CMakeLists.txt Android non trouv√©, test ignor√©"
        return 0
    fi

    # V√©rifier FFTEngine r√©f√©renc√©
    if ! grep -q "FFTEngine.hpp" "$cmake_file"; then
        log_error "FFTEngine.hpp non r√©f√©renc√© dans CMakeLists.txt"
        return 1
    fi

    log_success "Int√©gration Android valid√©e"
    return 0
}

# Test 8: Validation TypeScript
test_typescript() {
    echo "üìò Test: Interface TypeScript coh√©rente"

    local spec_file="specs/NativeAudioSpectrumModule.ts"

    if [[ ! -f "$spec_file" ]]; then
        log_warning "Spec TS non trouv√©e, test ignor√©"
        return 0
    fi

    # V√©rifier les fonctions critiques
    local required_functions=("initialize" "getState" "processAudioBuffer" "dispose" "getSpectrumData")

    for func in "${required_functions[@]}"; do
        if ! grep -q " $func(" "$spec_file"; then
            log_error "Fonction manquante dans spec TS: $func"
            return 1
        fi
    done

    log_success "Interface TypeScript coh√©rente"
    return 0
}

# Fonction principale
main() {
    echo "üöÄ Validation d'int√©gration FFT pour CI/CD"
    echo ""

    local tests_passed=0
    local total_tests=8

    # Ex√©cuter tous les tests
    local test_functions=(
        test_files_exist
        test_compilation_fixes
        test_jsi_api
        test_callbacks
        test_includes
        test_ios
        test_android
        test_typescript
    )

    for test_func in "${test_functions[@]}"; do
        if $test_func; then
            ((tests_passed++))
        else
            log_error "Test √©chou√©: $test_func"
        fi
        echo ""
    done

    # R√©sultat final
    echo "üìä R√©sultats: $tests_passed/$total_tests tests pass√©s"

    if [[ $tests_passed -eq $total_tests ]]; then
        log_success "üéâ Toutes les validations sont pass√©es !"
        log_success "Le module FFT est pr√™t pour l'int√©gration CI/CD"
        return 0
    else
        log_error "Certaines validations ont √©chou√©"
        log_warning "V√©rifiez les erreurs ci-dessus avant l'int√©gration"
        return 1
    fi
}

# Ex√©cution
main "$@"

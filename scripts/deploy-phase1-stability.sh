#!/bin/bash

# Script de d√©ploiement Phase 1: Stabilit√©
# Ce script d√©ploie tous les composants optimis√©s du syst√®me d'abonnement

set -e

echo "üöÄ D√©ploiement Phase 1: Stabilit√© du syst√®me d'abonnement"

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction de log
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rifier les pr√©requis
check_prerequisites() {
    log_info "V√©rification des pr√©requis..."

    # V√©rifier si Node.js est install√©
    if ! command -v node &> /dev/null; then
        log_error "Node.js n'est pas install√©. Veuillez l'installer d'abord."
        exit 1
    fi

    # V√©rifier si Firebase CLI est install√©
    if ! command -v firebase &> /dev/null; then
        log_error "Firebase CLI n'est pas install√©. Veuillez l'installer avec: npm install -g firebase-tools"
        exit 1
    fi

    # V√©rifier si le projet Firebase est configur√©
    if [ ! -f "firebase.json" ]; then
        log_error "Fichier firebase.json non trouv√©. Assurez-vous d'√™tre dans le bon r√©pertoire."
        exit 1
    fi

    log_success "Pr√©requis v√©rifi√©s avec succ√®s"
}

# Sauvegarder les fichiers existants
backup_existing_files() {
    log_info "Sauvegarde des fichiers existants..."

    BACKUP_DIR="backup-phase1-$(date +%Y%m%d-%H%M%S)"

    mkdir -p "$BACKUP_DIR"

    # Fichiers √† sauvegarder
    FILES_TO_BACKUP=(
        "src/services/firebase/subscriptionService.ts"
        "functions/src/subscriptionFunctions.ts"
        "src/types/subscription.ts"
    )

    for file in "${FILES_TO_BACKUP[@]}"; do
        if [ -f "$file" ]; then
            cp "$file" "$BACKUP_DIR/"
            log_info "Sauvegard√©: $file"
        fi
    done

    log_success "Sauvegarde termin√©e dans: $BACKUP_DIR"
}

# Copier les nouveaux fichiers
deploy_new_files() {
    log_info "D√©ploiement des nouveaux fichiers..."

    # Liste des nouveaux fichiers
    NEW_FILES=(
        "src/services/subscription/SubscriptionCacheService.ts"
        "src/services/subscription/FirestoreListenerOptimizer.ts"
        "src/services/subscription/SubscriptionHealthMonitor.ts"
        "src/types/subscriptionCache.ts"
        "src/services/subscription/PHASE1_STABILITE_README.md"
    )

    for file in "${NEW_FILES[@]}"; do
        if [ -f "$file" ]; then
            log_success "Fichier trouv√©: $file"
        else
            log_warning "Fichier manquant: $file"
        fi
    done

    log_success "Nouveaux fichiers v√©rifi√©s"
}

# Mettre √† jour les services existants
update_existing_services() {
    log_info "Mise √† jour des services existants..."

    # V√©rifier si les mises √† jour sont n√©cessaires
    if grep -q "subscriptionCacheService" "src/services/firebase/subscriptionService.ts"; then
        log_info "Services d√©j√† mis √† jour"
    else
        log_warning "Les services existants doivent √™tre mis √† jour manuellement"
        log_warning "V√©rifiez que subscriptionService.ts utilise le nouveau cache"
    fi
}

# Configurer les variables d'environnement
setup_environment() {
    log_info "Configuration des variables d'environnement..."

    # V√©rifier .env
    if [ ! -f ".env" ]; then
        log_warning "Fichier .env non trouv√©. Cr√©ation d'un template..."
        cat > .env.template << EOF
# Variables d'environnement pour Phase 1: Stabilit√©

# RevenueCat Webhook Secret (g√©n√©rer dans RevenueCat Dashboard)
REVENUECAT_WEBHOOK_SECRET=votre_secret_webhook_ici

# Configuration du cache
SUBSCRIPTION_CACHE_TTL=300000
USAGE_CACHE_TTL=120000
MAX_CACHE_RETRIES=3

# Monitoring
HEALTH_CHECK_INTERVAL=30000
ENABLE_AUTO_FIX=true
EOF
        log_warning "Template .env cr√©√©: .env.template"
        log_warning "Veuillez le renommer en .env et le configurer"
    else
        log_success "Fichier .env trouv√©"
    fi

    # Variables d'environnement Firebase Functions
    log_info "Configuration des variables Firebase Functions..."
    log_info "Ex√©cutez manuellement:"
    log_info "firebase functions:secrets:set REVENUECAT_WEBHOOK_SECRET"
}

# D√©ployer les fonctions Firebase
deploy_functions() {
    log_info "D√©ploiement des fonctions Firebase..."

    # V√©rifier si connect√© √† Firebase
    if ! firebase projects:list &> /dev/null; then
        log_error "Non connect√© √† Firebase. Veuillez ex√©cuter: firebase login"
        exit 1
    fi

    # D√©ployer seulement les fonctions mises √† jour
    log_info "D√©ploiement des fonctions: revenuecatWebhook, saveSubscription, getSubscription"

    # Build des fonctions
    cd functions
    npm run build

    # D√©ployer
    firebase deploy --only functions:revenuecatWebhook,saveSubscription,getSubscription,cancelSubscription

    cd ..

    log_success "Fonctions d√©ploy√©es avec succ√®s"
}

# Configurer RevenueCat Webhook
setup_revenuecat_webhook() {
    log_info "Configuration du webhook RevenueCat..."
    log_info ""
    log_info "üìã Instructions manuelles pour RevenueCat:"
    log_info "1. Aller dans RevenueCat Dashboard"
    log_info "2. Naviguer vers 'Projects' > Votre projet"
    log_info "3. Aller dans l'onglet 'Integrations'"
    log_info "4. Cliquer sur 'Add Webhook'"
    log_info "5. Configuration:"
    log_info "   - URL: https://us-central1-nyth.cloudfunctions.net/revenuecatWebhook"
    log_info "   - Events: S√©lectionner tous les √©v√©nements"
    log_info "   - Active: Oui"
    log_info "6. Sauvegarder le webhook secret dans Firebase:"
    log_info "   firebase functions:secrets:set REVENUECAT_WEBHOOK_SECRET"
    log_info ""
    log_warning "‚ö†Ô∏è Cette √©tape doit √™tre faite manuellement dans l'interface RevenueCat"
}

# Tests post-d√©ploiement
run_post_deployment_tests() {
    log_info "Ex√©cution des tests post-d√©ploiement..."

    # V√©rifier que les fonctions sont d√©ploy√©es
    if firebase functions:list | grep -q revenuecatWebhook; then
        log_success "‚úÖ Fonction revenuecatWebhook d√©ploy√©e"
    else
        log_error "‚ùå Fonction revenuecatWebhook non trouv√©e"
    fi

    # Test de sant√© du syst√®me
    log_info "Test de sant√© du syst√®me..."
    log_info "Vous pouvez tester avec:"
    log_info "curl -X GET https://us-central1-nyth.cloudfunctions.net/revenuecatWebhook"
    log_info "(Devrait retourner 405 Method Not Allowed)"
}

# V√©rifier l'√©tat final
final_verification() {
    log_info "V√©rification finale..."

    # Liste des composants requis
    REQUIRED_COMPONENTS=(
        "src/services/subscription/SubscriptionCacheService.ts"
        "src/services/subscription/FirestoreListenerOptimizer.ts"
        "src/services/subscription/SubscriptionHealthMonitor.ts"
        "functions/lib/src/subscriptionFunctions.js"
    )

    for component in "${REQUIRED_COMPONENTS[@]}"; do
        if [ -f "$component" ]; then
            log_success "‚úÖ $component"
        else
            log_error "‚ùå $component manquant"
        fi
    done
}

# Menu principal
main() {
    echo "========================================"
    echo "   Phase 1: Stabilit√© - D√©ploiement"
    echo "========================================"

    check_prerequisites
    backup_existing_files
    deploy_new_files
    update_existing_services
    setup_environment

    echo ""
    read -p "Voulez-vous d√©ployer les fonctions Firebase maintenant? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        deploy_functions
    else
        log_warning "D√©ploiement des fonctions ignor√©"
    fi

    setup_revenuecat_webhook
    run_post_deployment_tests
    final_verification

    echo ""
    log_success "üéâ Phase 1: Stabilit√© d√©ploy√©e avec succ√®s!"
    echo ""
    log_info "üìñ Consultez PHASE1_STABILITE_README.md pour la documentation compl√®te"
    log_info "üîß Configuration manuelle requise pour RevenueCat (voir instructions ci-dessus)"
    log_info "üìä Monitoring disponible via subscriptionHealthMonitor.getOverallHealth()"
}

# Gestion des erreurs
trap 'log_error "Script interrompu par l'\''utilisateur"' INT

# Lancer le script
main "$@"

# Script PowerShell pour lancer clang-tidy
param(
    [string]$BuildDir = "build_cpp17",
    [string]$Checks = "modernize-*,performance-*,readability-*,bugprone-*,cert-*,clang-analyzer-*",
    [switch]$Fix,
    [switch]$Verbose
)

Write-Host "üîç Lancement de clang-tidy sur le projet Nyth..." -ForegroundColor Green

# V√©rifier si clang-tidy est install√©
try {
    $clangTidyVersion = clang-tidy --version 2>$null
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå clang-tidy n'est pas install√© ou n'est pas dans le PATH" -ForegroundColor Red
        Write-Host "üí° Installez LLVM/Clang depuis: https://releases.llvm.org/" -ForegroundColor Yellow
        exit 1
    }
    Write-Host "‚úÖ clang-tidy trouv√©:" -ForegroundColor Green
    Write-Host $clangTidyVersion[0] -ForegroundColor Cyan
}
catch {
    Write-Host "‚ùå Erreur lors de la v√©rification de clang-tidy" -ForegroundColor Red
    exit 1
}

# Cr√©er le r√©pertoire de build si n√©cessaire
if (!(Test-Path $BuildDir)) {
    Write-Host "üìÅ Cr√©ation du r√©pertoire de build: $BuildDir" -ForegroundColor Yellow
    New-Item -ItemType Directory -Path $BuildDir -Force | Out-Null
}

# G√©n√©rer la compilation database
Write-Host "üîß G√©n√©ration de la compilation database..." -ForegroundColor Yellow
Push-Location $BuildDir
try {
    cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Erreur lors de la g√©n√©ration de la compilation database" -ForegroundColor Red
        exit 1
    }
}
finally {
    Pop-Location
}

# Fichiers C++ √† analyser
$cppFiles = @(
    "shared/Audio/core/*.cpp",
    "shared/Audio/core/*.hpp",
    "shared/filters/*.cpp",
    "shared/filters/*.hpp",
    "test/*.cpp",
    "__tests__/audio/*.cpp",
    "__tests__/core/*.cpp",
    "__tests__/effects/*.cpp",
    "__tests__/noise/*.cpp",
    "__tests__/recording/*.cpp",
    "__tests__/safety/*.cpp",
    "__tests__/utils/*.cpp"
)

$allFiles = @()
foreach ($pattern in $cppFiles) {
    $files = Get-ChildItem -Path $pattern -ErrorAction SilentlyContinue
    $allFiles += $files
}

if ($allFiles.Count -eq 0) {
    Write-Host "‚ö†Ô∏è  Aucun fichier C++ trouv√© avec les patterns sp√©cifi√©s" -ForegroundColor Yellow
    exit 0
}

Write-Host "üìã Fichiers √† analyser ($($allFiles.Count) fichiers):" -ForegroundColor Green
$allFiles | ForEach-Object { Write-Host "  - $($_.Name)" -ForegroundColor Cyan }

# Pr√©parer la commande clang-tidy
$clangTidyArgs = @(
    "--checks=$Checks",
    "--header-filter=.*",
    "--quiet"
)

if ($Fix) {
    $clangTidyArgs += "--fix"
    Write-Host "üîß Mode correction activ√©" -ForegroundColor Yellow
}

if ($Verbose) {
    $clangTidyArgs += "--verbose"
}

# Lancer clang-tidy sur chaque fichier
$errors = 0
$warnings = 0

foreach ($file in $allFiles) {
    Write-Host "üîç Analyse de $($file.Name)..." -ForegroundColor Yellow

    $output = & clang-tidy @clangTidyArgs $file.FullName 2>&1

    if ($LASTEXITCODE -ne 0) {
        $errors++
        Write-Host "‚ùå Erreurs dans $($file.Name):" -ForegroundColor Red
        Write-Host $output -ForegroundColor Red
    }
    elseif ($output) {
        $warnings++
        Write-Host "‚ö†Ô∏è  Avertissements dans $($file.Name):" -ForegroundColor Yellow
        Write-Host $output -ForegroundColor Yellow
    }
    else {
        Write-Host "‚úÖ $($file.Name) - Aucun probl√®me d√©tect√©" -ForegroundColor Green
    }
}

# R√©sum√©
Write-Host "`nüìä R√©sum√© de l'analyse clang-tidy:" -ForegroundColor Green
Write-Host "  Fichiers analys√©s: $($allFiles.Count)" -ForegroundColor Cyan
Write-Host "  Erreurs: $errors" -ForegroundColor $(if ($errors -gt 0) { "Red" } else { "Green" })
Write-Host "  Avertissements: $warnings" -ForegroundColor $(if ($warnings -gt 0) { "Yellow" } else { "Green" })

if ($errors -eq 0 -and $warnings -eq 0) {
    Write-Host "üéâ Tous les fichiers sont conformes aux standards clang-tidy!" -ForegroundColor Green
}
else {
    Write-Host "üí° Utilisez --Fix pour corriger automatiquement les probl√®mes corrigibles" -ForegroundColor Yellow
    exit 1
}

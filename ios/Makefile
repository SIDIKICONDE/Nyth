# Makefile pour la gestion des modules Shared
# Utilise les scripts Ruby pour ajouter/supprimer automatiquement tous les fichiers shared/

.PHONY: help add-shared remove-shared demo backup restore clean list-backups maintenance clean-cache check-project backup-project update-deps monitor maintenance-all maintenance-install install-deps clean-deps link-deps install-node-modules clean-node-modules setup-react-native stop-ports kill-processes clean-simulator reset-simulator start-simulator troubleshoot fresh-install test test-watch test-coverage archive export-dev export-prod devices logs clear-logs version bump-version assets-clean code-sign-check provisioning

# Couleurs pour les messages
RED=\033[0;31m
GREEN=\033[0;32m
YELLOW=\033[1;33m
BLUE=\033[0;34m
PURPLE=\033[0;35m
CYAN=\033[0;36m
NC=\033[0m # No Color

# Configuration
PROJECT_NAME=Nyth
SHARED_PATH=../shared
PROJECT_PATH=$(PROJECT_NAME).xcodeproj
BACKUP_PREFIX=$(PROJECT_PATH)/project.pbxproj.backup_

# V√©rification des pr√©requis
check-prerequisites:
	@echo "$(CYAN)üîç V√©rification des pr√©requis...$(NC)"
	@command -v ruby >/dev/null 2>&1 || { echo "$(RED)‚ùå Ruby n'est pas install√©$(NC)"; exit 1; }
	@gem list xcodeproj -i >/dev/null 2>&1 || { echo "$(RED)‚ùå Gem xcodeproj manquante. Installez avec: gem install xcodeproj$(NC)"; exit 1; }
	@test -d "$(SHARED_PATH)" || { echo "$(RED)‚ùå Dossier shared/ non trouv√©: $(SHARED_PATH)$(NC)"; exit 1; }
	@test -f "$(PROJECT_PATH)/project.pbxproj" || { echo "$(RED)‚ùå Fichier project.pbxproj non trouv√©$(NC)"; exit 1; }
	@echo "$(GREEN)‚úÖ Tous les pr√©requis sont satisfaits$(NC)"

# Aide
help:
	@echo "$(PURPLE)üéØ Makefile - Gestion des modules Shared$(NC)"
	@echo ""
	@echo "$(CYAN)Commandes disponibles:$(NC)"
	@echo ""
	@echo "  $(GREEN)make help$(NC)              - Afficher cette aide"
	@echo "  $(GREEN)make demo$(NC)              - Voir la d√©monstration des scripts"
	@echo ""
	@echo "$(PURPLE)üìÇ GESTION DES MODULES SHARED:$(NC)"
	@echo "  $(GREEN)make add-shared$(NC)        - Ajouter tous les modules shared/"
	@echo "  $(GREEN)make remove-shared$(NC)     - Supprimer tous les modules shared/"
	@echo ""
	@echo "$(PURPLE)üõ†Ô∏è  MAINTENANCE COMPL√àTE:$(NC)"
	@echo "  $(GREEN)make maintenance$(NC)       - Menu de maintenance interactif"
	@echo "  $(GREEN)make clean-cache$(NC)       - Nettoyer tous les caches"
	@echo "  $(GREEN)make check-project$(NC)     - Diagnostiquer l'√©tat du projet"
	@echo "  $(GREEN)make backup-project$(NC)    - Sauvegarde compl√®te du projet"
	@echo "  $(GREEN)make update-deps$(NC)       - Mettre √† jour les d√©pendances"
	@echo "  $(GREEN)make monitor$(NC)           - Monitorer les performances"
	@echo "  $(GREEN)make maintenance-all$(NC)   - Ex√©cuter toutes les v√©rifications"
	@echo ""
	@echo "$(PURPLE)‚öõÔ∏è  D√âPENDANCES REACT NATIVE:$(NC)"
	@echo "  $(GREEN)make install-deps$(NC)      - Installer toutes les d√©pendances"
	@echo "  $(GREEN)make clean-deps$(NC)        - Nettoyer les d√©pendances"
	@echo "  $(GREEN)make link-deps$(NC)         - Lier les d√©pendances natives"
	@echo "  $(GREEN)make install-node-modules$(NC) - Installer node_modules"
	@echo "  $(GREEN)make clean-node-modules$(NC) - Nettoyer node_modules"
	@echo "  $(GREEN)make setup-react-native$(NC) - Configuration compl√®te React Native"
	@echo ""
	@echo "$(PURPLE)üöÄ SIMULATEUR & PROCESSUS:$(NC)"
	@echo "  $(GREEN)make stop-ports$(NC)         - Arr√™ter les processus sur les ports"
	@echo "  $(GREEN)make kill-processes$(NC)     - Tuer les processus React Native"
	@echo "  $(GREEN)make clean-simulator$(NC)    - Nettoyer le simulateur iOS"
	@echo "  $(GREEN)make reset-simulator$(NC)    - Reset des donn√©es (sims pr√©serv√©s)"
	@echo "  $(GREEN)make start-simulator$(NC)    - D√©marrer le simulateur iOS"
	@echo ""
	@echo "$(PURPLE)üìã SAUVEGARDES & √âTAT:$(NC)"
	@echo "  $(GREEN)make backup$(NC)            - Cr√©er une sauvegarde manuelle"
	@echo "  $(GREEN)make list-backups$(NC)      - Lister toutes les sauvegardes"
	@echo "  $(GREEN)make status$(NC)            - Voir l'√©tat actuel du projet"
	@echo ""
	@echo "$(PURPLE)üßπ NETTOYAGE:$(NC)"
	@echo "  $(GREEN)make clean$(NC)             - Nettoyer les fichiers temporaires"
	@echo "  $(GREEN)make assets-clean$(NC)      - Nettoyer le cache des assets"
	@echo "  $(GREEN)make clear-logs$(NC)        - Effacer tous les logs"
	@echo ""
	@echo "$(PURPLE)üß™ TESTS & QUALIT√â:$(NC)"
	@echo "  $(GREEN)make test$(NC)              - Ex√©cuter tous les tests"
	@echo "  $(GREEN)make test-watch$(NC)        - Tests en mode watch"
	@echo "  $(GREEN)make test-coverage$(NC)     - Tests avec coverage"
	@echo ""
	@echo "$(PURPLE)üì¶ D√âPLOIEMENT & DISTRIBUTION:$(NC)"
	@echo "  $(GREEN)make archive$(NC)           - Cr√©er une archive iOS"
	@echo "  $(GREEN)make export-dev$(NC)        - Export pour d√©veloppement"
	@echo "  $(GREEN)make export-prod$(NC)       - Export pour production"
	@echo "  $(GREEN)make code-sign-check$(NC)   - V√©rifier le code signing"
	@echo "  $(GREEN)make provisioning$(NC)      - G√©rer les provisioning profiles"
	@echo ""
	@echo "$(PURPLE)üì± DEVICES & DEBUGGING:$(NC)"
	@echo "  $(GREEN)make devices$(NC)           - Lister les devices connect√©s"
	@echo "  $(GREEN)make logs$(NC)              - Afficher les logs en temps r√©el"
	@echo "  $(GREEN)make version$(NC)           - Afficher la version actuelle"
	@echo "  $(GREEN)make bump-version$(NC)      - Incr√©menter la version"
	@echo ""
	@echo "$(CYAN)Pr√©requis:$(NC)"
	@echo "  - Ruby >= 2.0"
	@echo "  - Gem xcodeproj"
	@echo "  - Dossier ../shared/"
	@echo ""
	@echo "$(YELLOW)‚ö†Ô∏è  Important:$(NC)"
	@echo "  - Les scripts cr√©ent des sauvegardes automatiques"
	@echo "  - Fermez Xcode avant d'ex√©cuter les scripts"
	@echo "  - Utilisez 'make list-backups' pour voir les sauvegardes"
	@echo "  - üì± Les simulateurs iOS sont TOUJOURS pr√©serv√©s"

# D√©monstration
demo: check-prerequisites
	@echo "$(CYAN)üé¨ D√âMONSTRATION - Scripts de gestion shared/$(NC)"
	@echo "$(PURPLE)" && ruby demo_shared_modules.rb

# Ajouter les modules shared/
add-shared: check-prerequisites
	@echo "$(CYAN)üöÄ AJOUT DES MODULES SHARED/$(NC)"
	@echo ""
	@echo "$(YELLOW)‚ö†Ô∏è  IMPORTANT:$(NC)"
	@echo "   - Une sauvegarde automatique sera cr√©√©e"
	@echo "   - Assurez-vous que Xcode est ferm√©"
	@echo ""
	@read -p "Voulez-vous continuer ? [y/N] " confirm && [ "$$confirm" = "y" ] || { echo "$(RED)‚ùå Op√©ration annul√©e$(NC)"; exit 1; }
	@echo ""
	@echo "$(GREEN)‚ñ∂Ô∏è  Ex√©cution du script...$(NC)"
	ruby add_shared_modules.rb
	@echo ""
	@echo "$(GREEN)‚úÖ Modules shared/ ajout√©s avec succ√®s !$(NC)"
	@echo ""
	@echo "$(CYAN)üìã Prochaines √©tapes:$(NC)"
	@echo "  1. Ouvrez le workspace: $(GREEN)open $(PROJECT_NAME).xcworkspace$(NC)"
	@echo "  2. V√©rifiez les groupes dans le navigateur"
	@echo "  3. Configurez les chemins d'inclusion si n√©cessaire"
	@echo "  4. Testez la compilation: Cmd+B"

# Supprimer les modules shared/
remove-shared: check-prerequisites
	@echo "$(CYAN)üóëÔ∏è SUPPRESSION DES MODULES SHARED/$(NC)"
	@echo ""
	@echo "$(YELLOW)‚ö†Ô∏è  IMPORTANT:$(NC)"
	@echo "   - Une sauvegarde automatique sera cr√©√©e"
	@echo "   - Le dossier physique ../shared/ ne sera pas supprim√©"
	@echo ""
	@read -p "Voulez-vous continuer ? [y/N] " confirm && [ "$$confirm" = "y" ] || { echo "$(RED)‚ùå Op√©ration annul√©e$(NC)"; exit 1; }
	@echo ""
	@echo "$(GREEN)‚ñ∂Ô∏è  Ex√©cution du script...$(NC)"
	ruby remove_shared_modules.rb
	@echo ""
	@echo "$(GREEN)‚úÖ Modules shared/ supprim√©s avec succ√®s !$(NC)"
	@echo ""
	@echo "$(CYAN)üìã Note:$(NC)"
	@echo "  Le dossier physique $(SHARED_PATH) reste intact"

# Cr√©er une sauvegarde manuelle
backup:
	@echo "$(CYAN)üìã CR√âATION D'UNE SAUVEGARDE MANUELLE$(NC)"
	@timestamp=$$(date +%Y%m%d_%H%M%S); \
	backup_file="$(BACKUP_PREFIX)$${timestamp}"; \
	cp "$(PROJECT_PATH)/project.pbxproj" "$$backup_file"; \
	echo "$(GREEN)‚úÖ Sauvegarde cr√©√©e:$(NC) $$backup_file"

# Lister les sauvegardes
list-backups:
	@echo "$(CYAN)üìã SAUVEGARDES DISPONIBLES$(NC)"
	@echo ""
	@ls -la $(PROJECT_PATH)/project.pbxproj.backup_* 2>/dev/null || echo "$(YELLOW)‚ÑπÔ∏è  Aucune sauvegarde trouv√©e$(NC)"
	@echo ""
	@echo "$(CYAN)üìñ Pour restaurer une sauvegarde:$(NC)"
	@echo "   $(GREEN)cp <sauvegarde> $(PROJECT_PATH)/project.pbxproj$(NC)"

# √âtat du projet
status: check-prerequisites
	@echo "$(CYAN)üìä √âTAT DU PROJET$(NC)"
	@echo ""
	@echo "$(BLUE)üìÅ Projet:$(NC) $(PROJECT_PATH)"
	@echo "$(BLUE)üìÇ Shared:$(NC) $(SHARED_PATH)"
	@if [ -d "$(SHARED_PATH)" ]; then \
		echo "$(BLUE)üìä Fichiers dans shared/:$(NC)"; \
		find "$(SHARED_PATH)" -type f \( -name "*.cpp" -o -name "*.hpp" -o -name "*.h" -o -name "*.mm" \) | wc -l | tr -d ' ' | xargs echo "   Sources: "; \
	fi
	@echo ""
	@echo "$(BLUE)üîç Modules pr√©sents dans le projet:$(NC)"
	@grep -c "shared" $(PROJECT_PATH)/project.pbxproj 2>/dev/null || echo "   Aucun module shared d√©tect√©"
	@echo ""
	@echo "$(BLUE)üìã Sauvegardes disponibles:$(NC)"
	@ls $(PROJECT_PATH)/project.pbxproj.backup_* 2>/dev/null | wc -l | tr -d ' ' | xargs echo "   Nombre: "

# Nettoyer les fichiers temporaires
clean:
	@echo "$(CYAN)üßπ NETTOYAGE DES FICHIERS TEMPORAIRES$(NC)"
	@rm -f demo_shared_modules.rb
	@echo "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"

# === SCRIPTS DE MAINTENANCE ===

# Menu de maintenance interactif
maintenance:
	@echo "$(PURPLE)üõ†Ô∏è  MENU DE MAINTENANCE iOS$(NC)"
	@echo ""
	@echo "$(CYAN)üìã Acc√®s au menu complet de maintenance...$(NC)"
	@echo ""
	@./maintenance.sh

# Nettoyage des caches
clean-cache:
	@echo "$(CYAN)üßπ NETTOYAGE COMPLET DES CACHES$(NC)"
	@echo ""
	@echo "$(YELLOW)‚ö†Ô∏è  Cette action va supprimer:$(NC)"
	@echo "   - Donn√©es d√©riv√©es Xcode"
	@echo "   - Caches de compilation"
	@echo "   - Caches CocoaPods"
	@echo "   - Anciennes sauvegardes (garde les 3 plus r√©centes)"
	@echo ""
	@read -p "Voulez-vous continuer ? [y/N] " confirm && [ "$$confirm" = "y" ] || { echo "$(RED)‚ùå Op√©ration annul√©e$(NC)"; exit 1; }
	@echo ""
	@echo "$(GREEN)‚ñ∂Ô∏è  Ex√©cution du nettoyage...$(NC)"
	@./maintenance/clean_cache.sh
	@echo ""
	@echo "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"

# Diagnostic du projet
check-project:
	@echo "$(CYAN)üîç DIAGNOSTIC COMPLET DU PROJET$(NC)"
	@echo ""
	@echo "$(BLUE)üìä Cette v√©rification inclut:$(NC)"
	@echo "   - Structure du projet"
	@echo "   - Configuration des fichiers"
	@echo "   - √âtat des d√©pendances"
	@echo "   - Sauvegardes disponibles"
	@echo "   - Modules shared/"
	@echo ""
	@echo "$(GREEN)‚ñ∂Ô∏è  Analyse en cours...$(NC)"
	@./maintenance/check_project.sh
	@echo ""
	@echo "$(GREEN)‚úÖ Diagnostic termin√©$(NC)"

# Sauvegarde compl√®te du projet
backup-project:
	@echo "$(CYAN)üíæ SAUVEGARDE COMPL√àTE DU PROJET$(NC)"
	@echo ""
	@echo "$(BLUE)üìÅ Cette sauvegarde inclut:$(NC)"
	@echo "   - Configuration Xcode compl√®te"
	@echo "   - Workspace et settings"
	@echo "   - Scripts de gestion"
	@echo "   - Documentation automatique"
	@echo ""
	@echo "$(GREEN)‚ñ∂Ô∏è  Cr√©ation de la sauvegarde...$(NC)"
	@./maintenance/backup_project.sh
	@echo ""
	@echo "$(GREEN)‚úÖ Sauvegarde termin√©e$(NC)"

# Mise √† jour des d√©pendances
update-deps:
	@echo "$(CYAN)üîÑ MISE √Ä JOUR DES D√âPENDANCES$(NC)"
	@echo ""
	@echo "$(YELLOW)‚ö†Ô∏è  IMPORTANT:$(NC)"
	@echo "   - Une sauvegarde sera cr√©√©e automatiquement"
	@echo "   - Les pods seront reinstall√©s"
	@echo "   - Fermez Xcode avant de continuer"
	@echo ""
	@read -p "Voulez-vous continuer ? [y/N] " confirm && [ "$$confirm" = "y" ] || { echo "$(RED)‚ùå Op√©ration annul√©e$(NC)"; exit 1; }
	@echo ""
	@echo "$(GREEN)‚ñ∂Ô∏è  Mise √† jour en cours...$(NC)"
	@./maintenance/update_dependencies.sh
	@echo ""
	@echo "$(GREEN)‚úÖ Mise √† jour termin√©e$(NC)"

# Monitoring des performances
monitor:
	@echo "$(CYAN)üìä MONITORING DES PERFORMANCES$(NC)"
	@echo ""
	@echo "$(BLUE)üìà Cette analyse inclut:$(NC)"
	@echo "   - Ressources syst√®me (CPU, RAM, Disque)"
	@echo "   - √âtat des caches et builds"
	@echo "   - Analyse des d√©pendances"
	@echo "   - Recommandations d'optimisation"
	@echo ""
	@echo "$(GREEN)‚ñ∂Ô∏è  Analyse en cours...$(NC)"
	@./maintenance/monitor_performance.sh
	@echo ""
	@echo "$(GREEN)‚úÖ Monitoring termin√©$(NC)"

# Maintenance compl√®te (toutes les v√©rifications)
maintenance-all: check-project monitor
	@echo ""
	@echo "$(PURPLE)üéâ MAINTENANCE COMPL√àTE TERMIN√âE$(NC)"
	@echo ""
	@echo "$(CYAN)üìã R√âSUM√â:$(NC)"
	@echo "   ‚úÖ Diagnostic du projet"
	@echo "   ‚úÖ Monitoring des performances"
	@echo ""
	@echo "$(YELLOW)üí° PROCHAINES √âTAPES RECOMMAND√âES:$(NC)"
	@echo "   - $(GREEN)make clean-cache$(NC)    si des probl√®mes de cache"
	@echo "   - $(GREEN)make backup-project$(NC) pour sauvegarder l'√©tat actuel"
	@echo "   - $(GREEN)make update-deps$(NC)    si des d√©pendances obsol√®tes"

# Installation des scripts de maintenance
maintenance-install:
	@echo "$(CYAN)üì¶ INSTALLATION DES SCRIPTS DE MAINTENANCE$(NC)"
	@echo ""
	@echo "$(BLUE)üîß Cette commande va:$(NC)"
	@echo "   - V√©rifier que tous les scripts existent"
	@echo "   - Les rendre ex√©cutables"
	@echo "   - Tester leur fonctionnement de base"
	@echo ""
	@read -p "Voulez-vous continuer ? [y/N] " confirm && [ "$$confirm" = "y" ] || { echo "$(RED)‚ùå Installation annul√©e$(NC)"; exit 1; }
	@echo ""
	@echo "$(GREEN)‚ñ∂Ô∏è  Installation en cours...$(NC)"
	@chmod +x maintenance.sh maintenance/*.sh 2>/dev/null || true
	@if [ -d "maintenance" ] && [ -f "maintenance.sh" ]; then \
		echo "$(GREEN)‚úÖ Scripts install√©s avec succ√®s$(NC)"; \
		echo ""; \
		echo "$(CYAN)üìã Test rapide:$(NC)"; \
		./maintenance.sh --help 2>/dev/null || echo "$(YELLOW)‚ÑπÔ∏è  Menu principal disponible via:$(NC) make maintenance"; \
	else \
		echo "$(RED)‚ùå Erreur lors de l'installation$(NC)"; \
		exit 1; \
	fi
	@echo ""
	@echo "$(GREEN)‚úÖ Installation termin√©e$(NC)"

# === D√âPENDANCES REACT NATIVE ===

# Installation des node_modules
install-node-modules:
	@echo "$(CYAN)üì¶ INSTALLATION DES NODE_MODULES$(NC)"
	@echo ""
	@echo "$(YELLOW)‚ö†Ô∏è  IMPORTANT:$(NC)"
	@echo "   - Installation depuis package.json"
	@echo "   - Peut prendre du temps"
	@echo "   - N√©cessite une connexion internet"
	@echo ""
	@read -p "Voulez-vous continuer ? [y/N] " confirm && [ "$$confirm" = "y" ] || { echo "$(RED)‚ùå Installation annul√©e$(NC)"; exit 1; }
	@echo ""
	@echo "$(GREEN)‚ñ∂Ô∏è  Installation des node_modules...$(NC)"
	@if command -v yarn >/dev/null 2>&1; then \
		echo "$(BLUE)‚ÑπÔ∏è  Utilisation de Yarn$(NC)"; \
		cd .. && yarn install; \
	elif command -v npm >/dev/null 2>&1; then \
		echo "$(BLUE)‚ÑπÔ∏è  Utilisation de NPM$(NC)"; \
		cd .. && npm install; \
	else \
		echo "$(RED)‚ùå Ni Yarn ni NPM trouv√©$(NC)"; \
		exit 1; \
	fi
	@echo ""
	@echo "$(GREEN)‚úÖ node_modules install√©s$(NC)"

# Nettoyage des node_modules
clean-node-modules:
	@echo "$(CYAN)üßπ NETTOYAGE DES NODE_MODULES$(NC)"
	@echo ""
	@echo "$(YELLOW)‚ö†Ô∏è  ATTENTION:$(NC)"
	@echo "   - Supprimera node_modules/"
	@echo "   - Supprimera package-lock.json et yarn.lock"
	@echo "   - N√©cessitera une r√©installation"
	@echo ""
	@read -p "Voulez-vous continuer ? [y/N] " confirm && [ "$$confirm" = "y" ] || { echo "$(RED)‚ùå Nettoyage annul√©$(NC)"; exit 1; }
	@echo ""
	@echo "$(GREEN)‚ñ∂Ô∏è  Suppression des node_modules...$(NC)"
	@cd .. && rm -rf node_modules package-lock.json yarn.lock
	@echo ""
	@echo "$(GREEN)‚úÖ node_modules nettoy√©s$(NC)"
	@echo ""
	@echo "$(CYAN)üí° Pour r√©installer:$(NC)"
	@echo "   $(GREEN)make install-node-modules$(NC)"

# Lier les d√©pendances natives
link-deps:
	@echo "$(CYAN)üîó LIEN DES D√âPENDANCES NATIVES$(NC)"
	@echo ""
	@echo "$(YELLOW)‚ö†Ô∏è  IMPORTANT:$(NC)"
	@echo "   - Lie les biblioth√®ques React Native"
	@echo "   - Modifie les configurations natives"
	@echo "   - Cr√©e une sauvegarde automatique"
	@echo ""
	@read -p "Voulez-vous continuer ? [y/N] " confirm && [ "$$confirm" = "y" ] || { echo "$(RED)‚ùå Laison annul√©e$(NC)"; exit 1; }
	@echo ""
	@echo "$(GREEN)‚ñ∂Ô∏è  Cr√©ation d'une sauvegarde...$(NC)"
	@make backup >/dev/null 2>&1
	@echo "$(GREEN)‚ñ∂Ô∏è  Laison des d√©pendances...$(NC)"
	@cd .. && if command -v npx >/dev/null 2>&1; then \
		npx react-native link; \
	elif command -v react-native >/dev/null 2>&1; then \
		react-native link; \
	else \
		echo "$(RED)‚ùå React Native CLI non trouv√©$(NC)"; \
		echo "   Installez avec: $(GREEN)npm install -g react-native-cli$(NC)"; \
		exit 1; \
	fi
	@echo ""
	@echo "$(GREEN)‚úÖ D√©pendances li√©es$(NC)"
	@echo ""
	@echo "$(CYAN)üìã Prochaines √©tapes:$(NC)"
	@echo "   1. V√©rifier: $(GREEN)make check-project$(NC)"
	@echo "   2. Recompiler: $(GREEN)make clean-cache && open Nyth.xcworkspace$(NC)"

# Installation compl√®te des d√©pendances
install-deps: install-node-modules update-deps
	@echo ""
	@echo "$(PURPLE)üéâ INSTALLATION COMPL√àTE TERMIN√âE$(NC)"
	@echo ""
	@echo "$(CYAN)üìã R√âSUM√â:$(NC)"
	@echo "   ‚úÖ node_modules install√©s"
	@echo "   ‚úÖ Pods mis √† jour"
	@echo ""
	@echo "$(YELLOW)üí° PROCHAINES √âTAPES:$(NC)"
	@echo "   - $(GREEN)make link-deps$(NC)      pour lier les d√©pendances natives"
	@echo "   - $(GREEN)make check-project$(NC)  pour v√©rifier l'installation"
	@echo "   - $(GREEN)open Nyth.xcworkspace$(NC) pour ouvrir le projet"

# Nettoyage complet des d√©pendances
clean-deps: clean-node-modules
	@echo ""
	@echo "$(PURPLE)üßπ NETTOYAGE COMPLET TERMIN√â$(NC)"
	@echo ""
	@echo "$(CYAN)üìã R√âSUM√â:$(NC)"
	@echo "   ‚úÖ node_modules supprim√©s"
	@echo "   ‚úÖ Locks supprim√©s"
	@echo ""
	@echo "$(YELLOW)üí° POUR R√âINSTALLER:$(NC)"
	@echo "   - $(GREEN)make install-deps$(NC)    installation compl√®te"
	@echo "   - $(GREEN)make install-node-modules$(NC) node_modules seulement"

# Configuration compl√®te React Native
setup-react-native: backup-project clean-deps install-deps link-deps
	@echo ""
	@echo "$(PURPLE)üöÄ CONFIGURATION REACT NATIVE COMPL√àTE$(NC)"
	@echo ""
	@echo "$(CYAN)üìã R√âSUM√â DE L'INSTALLATION:$(NC)"
	@echo "   ‚úÖ Sauvegarde cr√©√©e"
	@echo "   ‚úÖ node_modules nettoy√©s et r√©install√©s"
	@echo "   ‚úÖ Pods mis √† jour"
	@echo "   ‚úÖ D√©pendances natives li√©es"
	@echo ""
	@echo "$(GREEN)üéâ Configuration termin√©e !$(NC)"
	@echo ""
	@echo "$(CYAN)üìã PROCHAINES √âTAPES:$(NC)"
	@echo "   1. Ouvrir le workspace: $(GREEN)open Nyth.xcworkspace$(NC)"
	@echo "   2. Nettoyer et compiler: $(GREEN)Cmd+Shift+K$(NC) puis $(GREEN)Cmd+B$(NC)"
	@echo "   3. Tester: $(GREEN)react-native run-ios$(NC)"
	@echo ""
	@echo "$(YELLOW)‚ö†Ô∏è  SI PROBL√àMES:$(NC)"
	@echo "   - Utilisez: $(GREEN)make clean-cache$(NC)"
	@echo "   - V√©rifiez: $(GREEN)make check-project$(NC)"

# === SIMULATEUR & PROCESSUS ===

# Arr√™ter les processus sur les ports
stop-ports:
	@echo "$(CYAN)üõë ARR√äT DES PROCESSUS SUR LES PORTS$(NC)"
	@echo ""
	@echo "$(BLUE)üîç Ports surveill√©s:$(NC)"
	@echo "   - 8081 (Metro bundler)"
	@echo "   - 3000 (Services)"
	@echo "   - 4000-4999 (Autres services)"
	@echo ""
	@echo "$(GREEN)‚ñ∂Ô∏è  Recherche et arr√™t des processus...$(NC)"
	@for port in 8081 3000 4000 4001 5000; do \
		pid=$$(lsof -ti :$${port} 2>/dev/null || echo ""); \
		if [ -n "$${pid}" ]; then \
			echo "$(YELLOW)‚ö†Ô∏è  Port $${port} utilis√© par PID: $${pid}$$(NC)"; \
			kill -9 $${pid} 2>/dev/null && echo "$(GREEN)‚úÖ Port $${port} lib√©r√©$(NC)" || echo "$(RED)‚ùå Impossible de tuer PID $${pid}$$(NC)"; \
		else \
			echo "$(BLUE)‚ÑπÔ∏è  Port $${port} libre$(NC)"; \
		fi; \
	done
	@echo ""
	@echo "$(GREEN)‚úÖ V√©rification des ports termin√©e$(NC)"

# Tuer les processus React Native
kill-processes:
	@echo "$(CYAN)üíÄ √âLIMINATION DES PROCESSUS REACT NATIVE$(NC)"
	@echo ""
	@echo "$(YELLOW)‚ö†Ô∏è  ATTENTION:$(NC)"
	@echo "   - Tuer Metro bundler"
	@echo "   - Tuer React Native packager"
	@echo "   - Tuer simulateur iOS"
	@echo "   - Tuer Xcode"
	@echo ""
	@read -p "Voulez-vous continuer ? [y/N] " confirm && [ "$$confirm" = "y" ] || { echo "$(RED)‚ùå Op√©ration annul√©e$(NC)"; exit 1; }
	@echo ""
	@echo "$(GREEN)‚ñ∂Ô∏è  Suppression des processus...$(NC)"
	@pkill -f "metro" 2>/dev/null && echo "$(GREEN)‚úÖ Metro bundler arr√™t√©$(NC)" || echo "$(BLUE)‚ÑπÔ∏è  Aucun Metro bundler trouv√©$(NC)"
	@pkill -f "react-native" 2>/dev/null && echo "$(GREEN)‚úÖ React Native arr√™t√©$(NC)" || echo "$(BLUE)‚ÑπÔ∏è  Aucun React Native trouv√©$(NC)"
	@pkill -f "Simulator" 2>/dev/null && echo "$(GREEN)‚úÖ Simulateur arr√™t√©$(NC)" || echo "$(BLUE)‚ÑπÔ∏è  Aucun simulateur trouv√©$(NC)"
	@pkill -f "Xcode" 2>/dev/null && echo "$(GREEN)‚úÖ Xcode arr√™t√©$(NC)" || echo "$(BLUE)‚ÑπÔ∏è  Aucun Xcode trouv√©$(NC)"
	@echo ""
	@echo "$(GREEN)‚úÖ Nettoyage des processus termin√©$(NC)"
	@echo ""
	@echo "$(CYAN)üí° V√©rification:$(NC)"
	@echo "   $(GREEN)make stop-ports$(NC) pour v√©rifier les ports"

# Nettoyer le simulateur iOS
clean-simulator:
	@echo "$(CYAN)üßπ NETTOYAGE DU SIMULATEUR iOS$(NC)"
	@echo ""
	@echo "$(YELLOW)‚ö†Ô∏è  IMPORTANT:$(NC)"
	@echo "   - Supprimera les donn√©es des apps"
	@echo "   - Gardera les simulateurs install√©s"
	@echo "   - N√©cessitera un red√©marrage"
	@echo ""
	@read -p "Voulez-vous continuer ? [y/N] " confirm && [ "$$confirm" = "y" ] || { echo "$(RED)‚ùå Nettoyage annul√©$(NC)"; exit 1; }
	@echo ""
	@echo "$(GREEN)‚ñ∂Ô∏è  Arr√™t du simulateur...$(NC)"
	@pkill -f "Simulator" 2>/dev/null && echo "$(GREEN)‚úÖ Simulateur arr√™t√©$(NC)" || echo "$(BLUE)‚ÑπÔ∏è  Simulateur d√©j√† arr√™t√©$(NC)"
	@echo ""
	@echo "$(GREEN)‚ñ∂Ô∏è  Nettoyage des donn√©es...$(NC)"
	@if command -v xcrun >/dev/null 2>&1; then \
		xcrun simctl erase all 2>/dev/null && echo "$(GREEN)‚úÖ Donn√©es des simulateurs effac√©es$(NC)" || echo "$(RED)‚ùå Erreur lors du nettoyage$(NC)"; \
	else \
		echo "$(RED)‚ùå xcrun non trouv√©$(NC)"; \
		exit 1; \
	fi
	@echo ""
	@echo "$(GREEN)‚úÖ Nettoyage du simulateur termin√©$(NC)"

# Reset des donn√©es du simulateur (sans supprimer les simulateurs)
reset-simulator:
	@echo "$(CYAN)üîÑ RESET DES DONN√âES SIMULATEUR iOS$(NC)"
	@echo ""
	@echo "$(YELLOW)‚ö†Ô∏è  ATTENTION:$(NC)"
	@echo "   - Supprimera les donn√©es des APPS seulement"
	@echo "   - Gardera TOUS les simulateurs intacts"
	@echo "   - √âquivalent √† 'clean-simulator'"
	@echo ""
	@read -p "Voulez-vous continuer ? [y/N] " confirm && [ "$$confirm" = "y" ] || { echo "$(RED)‚ùå Reset annul√©$(NC)"; exit 1; }
	@echo ""
	@echo "$(GREEN)‚ñ∂Ô∏è  Arr√™t du simulateur...$(NC)"
	@pkill -f "Simulator" 2>/dev/null && echo "$(GREEN)‚úÖ Simulateur arr√™t√©$(NC)" || echo "$(BLUE)‚ÑπÔ∏è  Simulateur d√©j√† arr√™t√©$(NC)"
	@echo ""
	@echo "$(GREEN)‚ñ∂Ô∏è  Nettoyage des donn√©es des simulateurs...$(NC)"
	@if command -v xcrun >/dev/null 2>&1; then \
		xcrun simctl shutdown all 2>/dev/null; \
		xcrun simctl erase all 2>/dev/null && echo "$(GREEN)‚úÖ Donn√©es des simulateurs effac√©es$(NC)" || echo "$(RED)‚ùå Erreur lors du nettoyage$(NC)"; \
	else \
		echo "$(RED)‚ùå xcrun non trouv√©$(NC)"; \
		exit 1; \
	fi
	@echo ""
	@echo "$(GREEN)‚úÖ Reset des donn√©es termin√©$(NC)"
	@echo ""
	@echo "$(CYAN)üí° Note:$(NC)"
	@echo "   - Les simulateurs sont conserv√©s"
	@echo "   - Pour red√©marrer: $(GREEN)make start-simulator$(NC)"

# D√©marrer le simulateur iOS
start-simulator:
	@echo "$(CYAN)üöÄ D√âMARRAGE DU SIMULATEUR iOS$(NC)"
	@echo ""
	@echo "$(BLUE)üì± Options:$(NC)"
	@echo "   - D√©marre le dernier simulateur iPhone"
	@echo "   - Utilise iOS Simulator"
	@echo "   - Ouvre automatiquement"
	@echo ""
	@echo "$(GREEN)‚ñ∂Ô∏è  V√©rification des pr√©requis...$(NC)"
	@if ! command -v xcrun >/dev/null 2>&1; then \
		echo "$(RED)‚ùå xcrun non trouv√©$(NC)"; \
		exit 1; \
	fi
	@if ! command -v open >/dev/null 2>&1; then \
		echo "$(RED)‚ùå Commande open non trouv√©e$(NC)"; \
		exit 1; \
	fi
	@echo ""
	@echo "$(GREEN)‚ñ∂Ô∏è  D√©marrage du simulateur...$(NC)"
	@open -a Simulator 2>/dev/null && echo "$(GREEN)‚úÖ Simulateur d√©marr√©$(NC)" || echo "$(RED)‚ùå Erreur lors du d√©marrage$(NC)"
	@echo ""
	@echo "$(GREEN)‚úÖ Simulateur iOS op√©rationnel$(NC)"
	@echo ""
	@echo "$(CYAN)üí° Pour tester:$(NC)"
	@echo "   $(GREEN)react-native run-ios --simulator='iPhone 15'$(NC)"

# Workflow complet pour probl√®mes de d√©veloppement
troubleshoot: stop-ports kill-processes clean-cache
	@echo ""
	@echo "$(PURPLE)üîß D√âPANNAGE COMPLET TERMIN√â$(NC)"
	@echo ""
	@echo "$(CYAN)üìã R√âSUM√â:$(NC)"
	@echo "   ‚úÖ Ports lib√©r√©s"
	@echo "   ‚úÖ Processus tu√©s"
	@echo "   ‚úÖ Caches nettoy√©s"
	@echo ""
	@echo "$(YELLOW)üí° PROCHAINES √âTAPES:$(NC)"
	@echo "   1. $(GREEN)make start-sim$(NC) pour d√©marrer le simulateur"
	@echo "   2. $(GREEN)make check-project$(NC) pour v√©rifier l'√©tat"
	@echo "   3. $(GREEN)react-native run-ios$(NC) pour tester"

# Installation fra√Æche (sans toucher aux simulateurs)
fresh-install: kill-processes clean-deps install-deps link-deps
	@echo ""
	@echo "$(PURPLE)üîÑ INSTALLATION FRA√éCHE TERMIN√âE$(NC)"
	@echo ""
	@echo "$(CYAN)üìã R√âSUM√â:$(NC)"
	@echo "   ‚úÖ Processus tu√©s"
	@echo "   ‚úÖ Simulateurs PRESERV√âS"
	@echo "   ‚úÖ D√©pendances nettoy√©es et r√©install√©es"
	@echo "   ‚úÖ Liens natifs refaits"
	@echo ""
	@echo "$(GREEN)üéâ Pr√™t pour un nouveau d√©part !$(NC)"
	@echo ""
	@echo "$(YELLOW)üí° Options simulateur:$(NC)"
	@echo "   $(GREEN)make clean-sim$(NC) pour nettoyer les donn√©es"
	@echo "   $(GREEN)make start-sim$(NC) pour d√©marrer"
	@echo "   $(GREEN)react-native run-ios$(NC) pour tester"

# === RACCOURCIS ===

# Raccourci pour les commandes fr√©quentes
install: add-shared
uninstall: remove-shared

# Raccourcis de maintenance
clean-all: clean-cache clean
setup: maintenance-install
doctor: check-project
perf: monitor
full-backup: backup-project

# Raccourcis de d√©pendances React Native
install-all: install-deps
clean-all-deps: clean-deps
link: link-deps
setup-rn: setup-react-native

# Raccourcis de simulateur et processus
stop-all: stop-ports
kill-all:
	@echo "$(YELLOW)‚ö†Ô∏è  Pour tuer les processus:$(NC)"
	@echo "   $(GREEN)make kill-processes$(NC)"
clean-sim: clean-simulator
reset-sim: reset-simulator
start-sim: start-simulator
fresh-start:
	@echo "$(CYAN)üîÑ FRESH START - D√©marrage propre$(NC)"
	@echo ""
	@echo "$(YELLOW)‚ö†Ô∏è  Cette commande va:$(NC)"
	@echo "   1. Tuer tous les processus React Native"
	@echo "   2. Nettoyer les donn√©es du simulateur (SANS supprimer)"
	@echo "   3. D√©marrer le simulateur"
	@echo ""
	@echo "$(BLUE)‚ÑπÔ∏è  Note: Les simulateurs sont TOUJOURS pr√©serv√©s$(NC)"
	@echo ""
	@read -p "Voulez-vous continuer ? [y/N] " confirm && [ "$$confirm" = "y" ] || { echo "$(RED)‚ùå Op√©ration annul√©e$(NC)"; exit 1; }
	@echo ""
	@echo "$(GREEN)‚ñ∂Ô∏è  Ex√©cution de fresh-start...$(NC)"
	@make kill-processes
	@make clean-simulator
	@make start-simulator
	@echo ""
	@echo "$(PURPLE)üéâ FRESH START TERMIN√â$(NC)"
	@echo ""
	@echo "$(CYAN)üìã Simulateurs:$(NC)"
	@echo "   ‚úÖ Pr√©serv√©s et nettoy√©s"
	@echo "   üöÄ Pr√™t √† √™tre utilis√©"

# === TESTS & QUALIT√â ===

# Ex√©cuter tous les tests
test:
	@echo "$(CYAN)üß™ EX√âCUTION DES TESTS$(NC)"
	@echo ""
	@echo "$(BLUE)üîç Recherche des frameworks de test:$(NC)"
	@if [ -f "../package.json" ]; then \
		if grep -q "jest\|mocha\|jasmine" ../package.json; then \
			echo "$(GREEN)‚úÖ Framework de test d√©tect√©$(NC)"; \
			echo ""; \
			echo "$(GREEN)‚ñ∂Ô∏è  Lancement des tests...$(NC)"; \
			cd .. && npm test; \
		else \
			echo "$(YELLOW)‚ö†Ô∏è  Aucun framework de test d√©tect√©$(NC)"; \
			echo "   Installez Jest: $(GREEN)npm install --save-dev jest$(NC)"; \
		fi \
	else \
		echo "$(RED)‚ùå package.json non trouv√©$(NC)"; \
		exit 1; \
	fi

# Tests en mode watch
test-watch:
	@echo "$(CYAN)üëÄ TESTS EN MODE WATCH$(NC)"
	@echo ""
	@if [ -f "../package.json" ]; then \
		cd .. && npm run test:watch 2>/dev/null || npm test -- --watch; \
	else \
		echo "$(RED)‚ùå package.json non trouv√©$(NC)"; \
		exit 1; \
	fi

# Tests avec coverage
test-coverage:
	@echo "$(CYAN)üìä TESTS AVEC COVERAGE$(NC)"
	@echo ""
	@if [ -f "../package.json" ]; then \
		cd .. && npm run test:coverage 2>/dev/null || npm test -- --coverage; \
	else \
		echo "$(RED)‚ùå package.json non trouv√©$(NC)"; \
		exit 1; \
	fi

# === D√âPLOIEMENT & DISTRIBUTION ===

# Cr√©er une archive iOS
archive:
	@echo "$(CYAN)üì¶ CR√âATION D'ARCHIVE iOS$(NC)"
	@echo ""
	@echo "$(YELLOW)‚ö†Ô∏è  IMPORTANT:$(NC)"
	@echo "   - Archive pour distribution"
	@echo "   - N√©cessite un compte d√©veloppeur"
	@echo "   - V√©rifiez le code signing"
	@echo ""
	@read -p "Voulez-vous continuer ? [y/N] " confirm && [ "$$confirm" = "y" ] || { echo "$(RED)‚ùå Archive annul√©e$(NC)"; exit 1; }
	@echo ""
	@echo "$(GREEN)‚ñ∂Ô∏è  Cr√©ation de l'archive...$(NC)"
	@if command -v xcodebuild >/dev/null 2>&1; then \
		xcodebuild -workspace Nyth.xcworkspace -scheme Nyth -configuration Release -archivePath build/Nyth.xcarchive archive; \
		echo "$(GREEN)‚úÖ Archive cr√©√©e:$(NC) build/Nyth.xcarchive"; \
	else \
		echo "$(RED)‚ùå xcodebuild non trouv√©$(NC)"; \
		exit 1; \
	fi

# Export pour d√©veloppement
export-dev:
	@echo "$(CYAN)üì§ EXPORT D√âVELOPPEMENT$(NC)"
	@echo ""
	@echo "$(YELLOW)‚ö†Ô∏è  Export pour d√©veloppement/test$(NC)"
	@echo ""
	@read -p "Voulez-vous continuer ? [y/N] " confirm && [ "$$confirm" = "y" ] || { echo "$(RED)‚ùå Export annul√©$(NC)"; exit 1; }
	@echo ""
	@echo "$(GREEN)‚ñ∂Ô∏è  Export en cours...$(NC)"
	@if [ -d "build/Nyth.xcarchive" ]; then \
		xcodebuild -exportArchive -archivePath build/Nyth.xcarchive -exportPath build/Development -exportOptionsPlist exportOptions-dev.plist; \
		echo "$(GREEN)‚úÖ Export r√©ussi:$(NC) build/Development"; \
	else \
		echo "$(RED)‚ùå Archive non trouv√©e. Cr√©ez d'abord:$(NC) make archive"; \
		exit 1; \
	fi

# Export pour production
export-prod:
	@echo "$(CYAN)üì§ EXPORT PRODUCTION$(NC)"
	@echo ""
	@echo "$(YELLOW)‚ö†Ô∏è  Export pour App Store$(NC)"
	@echo "   - N√©cessite certificats de distribution"
	@echo "   - V√©rifiez les provisioning profiles"
	@echo ""
	@read -p "Voulez-vous continuer ? [y/N] " confirm && [ "$$confirm" = "y" ] || { echo "$(RED)‚ùå Export annul√©$(NC)"; exit 1; }
	@echo ""
	@echo "$(GREEN)‚ñ∂Ô∏è  Export en cours...$(NC)"
	@if [ -d "build/Nyth.xcarchive" ]; then \
		xcodebuild -exportArchive -archivePath build/Nyth.xcarchive -exportPath build/Production -exportOptionsPlist exportOptions-prod.plist; \
		echo "$(GREEN)‚úÖ Export r√©ussi:$(NC) build/Production"; \
	else \
		echo "$(RED)‚ùå Archive non trouv√©e. Cr√©ez d'abord:$(NC) make archive"; \
		exit 1; \
	fi

# V√©rifier le code signing
code-sign-check:
	@echo "$(CYAN)üîê V√âRIFICATION CODE SIGNING$(NC)"
	@echo ""
	@echo "$(GREEN)‚ñ∂Ô∏è  V√©rification des certificats...$(NC)"
	@security find-identity -v -p codesigning | grep -E "(iPhone|iOS)" || echo "$(YELLOW)‚ö†Ô∏è  Aucun certificat iOS trouv√©$(NC)"
	@echo ""
	@echo "$(GREEN)‚ñ∂Ô∏è  V√©rification des provisioning profiles...$(NC)"
	@ls -la ~/Library/MobileDevice/Provisioning\ Profiles/ 2>/dev/null || echo "$(YELLOW)‚ö†Ô∏è  Aucun provisioning profile trouv√©$(NC)"
	@echo ""
	@echo "$(CYAN)üí° Pour ajouter un certificat:$(NC)"
	@echo "   - Xcode > Preferences > Accounts"
	@echo "   - Double-clic sur .mobileprovision"

# G√©rer les provisioning profiles
provisioning:
	@echo "$(CYAN)üìÑ GESTION PROVISIONING PROFILES$(NC)"
	@echo ""
	@echo "$(BLUE)üìã Provisioning profiles install√©s:$(NC)"
	@ls -la ~/Library/MobileDevice/Provisioning\ Profiles/ 2>/dev/null || echo "$(YELLOW)‚ö†Ô∏è  Aucun profile trouv√©$(NC)"
	@echo ""
	@echo "$(CYAN)üí° Actions disponibles:$(NC)"
	@echo "   1. T√©l√©charger depuis Apple Developer"
	@echo "   2. Double-clic pour installer"
	@echo "   3. Xcode > Preferences > Accounts > Download"

# === DEVICES & DEBUGGING ===

# Lister les devices connect√©s
devices:
	@echo "$(CYAN)üì± DEVICES CONNECT√âS$(NC)"
	@echo ""
	@echo "$(GREEN)‚ñ∂Ô∏è  Recherche des devices...$(NC)"
	@if command -v xcrun >/dev/null 2>&1; then \
		echo "$(BLUE)üì± Devices physiques:$(NC)"; \
		xcrun xctrace list devices 2>/dev/null | grep -E "(iPhone|iPad)" || echo "$(YELLOW)   Aucun device physique$(NC)"; \
		echo ""; \
		echo "$(BLUE)üì± Simulateurs:$(NC)"; \
		xcrun simctl list devices | grep -E "(Booted|Shutdown)" | head -10; \
	else \
		echo "$(RED)‚ùå xcrun non trouv√©$(NC)"; \
		exit 1; \
	fi

# Afficher les logs en temps r√©el
logs:
	@echo "$(CYAN)üìã LOGS EN TEMPS R√âEL$(NC)"
	@echo ""
	@echo "$(YELLOW)‚ö†Ô∏è  Ctrl+C pour arr√™ter$(NC)"
	@echo ""
	@if command -v xcrun >/dev/null 2>&1; then \
		echo "$(GREEN)‚ñ∂Ô∏è  Affichage des logs...$(NC)"; \
		xcrun simctl spawn booted log stream --level=debug --predicate 'processImagePath contains "Nyth"'; \
	else \
		echo "$(RED)‚ùå xcrun non trouv√©$(NC)"; \
		echo "   Alternative: $(GREEN)xcodebuild -workspace Nyth.xcworkspace -scheme Nyth -configuration Debug build$(NC)"; \
		exit 1; \
	fi

# Nettoyer le cache des assets
assets-clean:
	@echo "$(CYAN)üñºÔ∏è  NETTOYAGE CACHE ASSETS$(NC)"
	@echo ""
	@echo "$(GREEN)‚ñ∂Ô∏è  Suppression du cache Metro...$(NC)"
	@cd .. && rm -rf node_modules/.cache 2>/dev/null && echo "$(GREEN)‚úÖ Cache Metro supprim√©$(NC)" || echo "$(BLUE)‚ÑπÔ∏è  Aucun cache Metro$(NC)"
	@echo ""
	@echo "$(GREEN)‚ñ∂Ô∏è  Suppression du cache iOS...$(NC)"
	@rm -rf ~/Library/Developer/CoreSimulator/Caches/* 2>/dev/null && echo "$(GREEN)‚úÖ Cache simulateur supprim√©$(NC)" || echo "$(BLUE)‚ÑπÔ∏è  Aucun cache simulateur$(NC)"
	@echo ""
	@echo "$(GREEN)‚úÖ Cache assets nettoy√©$(NC)"

# Effacer tous les logs
clear-logs:
	@echo "$(CYAN)üóëÔ∏è  EFFACEMENT DES LOGS$(NC)"
	@echo ""
	@echo "$(GREEN)‚ñ∂Ô∏è  Suppression des logs iOS...$(NC)"
	@rm -rf ~/Library/Logs/CoreSimulator/* 2>/dev/null && echo "$(GREEN)‚úÖ Logs simulateur supprim√©s$(NC)" || echo "$(BLUE)‚ÑπÔ∏è  Aucun log simulateur$(NC)"
	@rm -rf ~/Library/Developer/Xcode/DerivedData/*/Logs/* 2>/dev/null && echo "$(GREEN)‚úÖ Logs Xcode supprim√©s$(NC)" || echo "$(BLUE)‚ÑπÔ∏è  Aucun log Xcode$(NC)"
	@echo ""
	@echo "$(GREEN)‚úÖ Tous les logs effac√©s$(NC)"

# Afficher la version actuelle
version:
	@echo "$(CYAN)üìã VERSION DE L'APPLICATION$(NC)"
	@echo ""
	@if [ -f "Nyth.xcodeproj/project.pbxproj" ]; then \
		echo "$(BLUE)üîç Version dans Xcode:$(NC)"; \
		grep -A1 'MARKETING_VERSION' Nyth.xcodeproj/project.pbxproj | grep -o '[0-9]\+\.[0-9]\+\.[0-9]*' | head -1 || echo "   N/A"; \
		echo ""; \
		echo "$(BLUE)üîç Build version:$(NC)"; \
		grep -A1 'CURRENT_PROJECT_VERSION' Nyth.xcodeproj/project.pbxproj | grep -o '[0-9]\+' | head -1 || echo "   N/A"; \
	else \
		echo "$(RED)‚ùå Fichier projet non trouv√©$(NC)"; \
		exit 1; \
	fi
	@echo ""
	@if [ -f "../package.json" ]; then \
		echo "$(BLUE)üîç Version dans package.json:$(NC)"; \
		grep '"version"' ../package.json | cut -d'"' -f4 || echo "   N/A"; \
	fi

# Incr√©menter la version
bump-version:
	@echo "$(CYAN)‚¨ÜÔ∏è  INCR√âMENTATION DE VERSION$(NC)"
	@echo ""
	@echo "$(YELLOW)‚ö†Ô∏è  ATTENTION:$(NC)"
	@echo "   - Incr√©mente le build number"
	@echo "   - Modifie project.pbxproj"
	@echo "   - Cr√©e une sauvegarde automatique"
	@echo ""
	@read -p "Voulez-vous continuer ? [y/N] " confirm && [ "$$confirm" = "y" ] || { echo "$(RED)‚ùå Incr√©mentation annul√©e$(NC)"; exit 1; }
	@echo ""
	@make backup >/dev/null 2>&1
	@if [ -f "Nyth.xcodeproj/project.pbxproj" ]; then \
		current_version=$$(grep -A1 'CURRENT_PROJECT_VERSION' Nyth.xcodeproj/project.pbxproj | grep -o '[0-9]\+' | head -1); \
		new_version=$$((current_version + 1)); \
		sed -i '' "s/CURRENT_PROJECT_VERSION = [0-9]\+/CURRENT_PROJECT_VERSION = $${new_version}/g" Nyth.xcodeproj/project.pbxproj; \
		echo "$(GREEN)‚úÖ Version incr√©ment√©e:$(NC) $${current_version} ‚Üí $${new_version}"; \
	else \
		echo "$(RED)‚ùå Fichier projet non trouv√©$(NC)"; \
		exit 1; \
	fi

# Raccourcis de d√©pannage
fix-issues: troubleshoot
reset-all:
	@echo "$(YELLOW)‚ö†Ô∏è  Pour reset complet:$(NC)"
	@echo "   $(GREEN)make fresh-install$(NC)"

# Raccourcis de tests
test-all: test test-coverage
test-dev: test-watch

# Raccourcis de d√©ploiement
build-archive: archive
build-dev: archive export-dev
build-prod: archive export-prod

# Raccourcis de d√©veloppement
dev-setup: clean-cache install-deps link-deps start-simulator
dev-logs: logs
dev-clean: assets-clean clear-logs clean-cache

# Raccourcis de version
show-version: version
inc-version: bump-version

# Cible par d√©faut
.DEFAULT_GOAL := help

#!/bin/bash

# Script de diagnostic complet du projet iOS
# V√©rifie l'√©tat de sant√© du projet et d√©tecte les probl√®mes

set -e

echo "üîç DIAGNOSTIC COMPLET DU PROJET iOS"
echo "====================================="

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# Compteurs
errors=0
warnings=0
info=0

# Fonctions de logging
log_error() {
    echo -e "${RED}‚ùå $1${NC}"
    ((errors++))
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
    ((warnings++))
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
    ((info++))
}

# 1. V√©rifier la structure du projet
echo ""
echo "üìÅ V√âRIFICATION DE LA STRUCTURE:"
echo "----------------------------------"

# V√©rifier le workspace
if [ -f "Nyth.xcworkspace/contents.xcworkspacedata" ]; then
    log_success "Workspace Nyth.xcworkspace trouv√©"
else
    log_error "Workspace Nyth.xcworkspace manquant"
fi

# V√©rifier le projet
if [ -f "Nyth.xcodeproj/project.pbxproj" ]; then
    log_success "Projet Nyth.xcodeproj trouv√©"
else
    log_error "Projet Nyth.xcodeproj manquant"
fi

# V√©rifier les dossiers importants
for dir in "Nyth.xcodeproj/xcshareddata" "Nyth" "Pods"; do
    if [ -d "$dir" ]; then
        log_success "Dossier $dir pr√©sent"
    else
        log_warning "Dossier $dir manquant"
    fi
done

# 2. V√©rifier les fichiers de configuration
echo ""
echo "‚öôÔ∏è  V√âRIFICATION DES CONFIGURATIONS:"
echo "-------------------------------------"

# V√©rifier les fichiers de configuration
config_files=("Podfile" "Podfile.lock" "Info.plist" "project.pbxproj")
for file in "${config_files[@]}"; do
    if [ -f "$file" ] || [ -f "Nyth.xcodeproj/$file" ] || [ -f "Nyth/$file" ]; then
        log_success "Configuration $file trouv√©e"
    else
        log_warning "Configuration $file manquante"
    fi
done

# 3. V√©rifier les caches et sauvegardes
echo ""
echo "üíæ V√âRIFICATION DES CACHES:"
echo "------------------------------"

# V√©rifier l'espace disque des donn√©es d√©riv√©es
derived_data_size=$(du -sh ~/Library/Developer/Xcode/DerivedData 2>/dev/null | cut -f1)
if [ -n "$derived_data_size" ]; then
    log_info "Donn√©es d√©riv√©es Xcode: $derived_data_size"
else
    log_info "Aucune donn√©e d√©riv√©e trouv√©e"
fi

# V√©rifier les sauvegardes du projet
backup_count=$(ls -1 Nyth.xcodeproj/project.pbxproj.backup_* 2>/dev/null | wc -l | tr -d ' ')
if [ "$backup_count" -gt 0 ]; then
    log_success "$backup_count sauvegardes du projet trouv√©es"
else
    log_warning "Aucune sauvegarde du projet trouv√©e"
fi

# 4. V√©rifier les d√©pendances
echo ""
echo "üì¶ V√âRIFICATION DES D√âPENDANCES:"
echo "-----------------------------------"

# V√©rifier CocoaPods
if command -v pod >/dev/null 2>&1; then
    pod_version=$(pod --version)
    log_success "CocoaPods install√© (v$pod_version)"
else
    log_error "CocoaPods non install√©"
fi

# V√©rifier si les Pods sont install√©s
if [ -d "Pods" ] && [ -f "Podfile.lock" ]; then
    log_success "Pods install√©s"
else
    log_warning "Pods non install√©s ou Podfile.lock manquant"
fi

# 5. V√©rifier les scripts de gestion
echo ""
echo "üîß V√âRIFICATION DES SCRIPTS:"
echo "------------------------------"

scripts=("add_shared_modules.rb" "remove_shared_modules.rb" "Makefile")
for script in "${scripts[@]}"; do
    if [ -f "$script" ]; then
        log_success "Script $script trouv√©"
    else
        log_warning "Script $script manquant"
    fi
done

# Scripts de maintenance
maintenance_scripts=("maintenance/clean_cache.sh" "maintenance/check_project.sh")
for script in "${maintenance_scripts[@]}"; do
    if [ -f "$script" ]; then
        log_success "Script maintenance $script trouv√©"
    else
        log_warning "Script maintenance $script manquant"
    fi
done

# 6. V√©rifier les modules shared
echo ""
echo "üìÇ V√âRIFICATION DES MODULES SHARED:"
echo "--------------------------------------"

# V√©rifier le dossier shared
if [ -d "../shared" ]; then
    shared_files=$(find ../shared -name "*.cpp" -o -name "*.hpp" -o -name "*.h" | wc -l | tr -d ' ')
    log_success "Dossier shared trouv√© avec $shared_files fichiers"

    # V√©rifier les sous-modules
    for module in "Audio" "Videos"; do
        if [ -d "../shared/$module" ]; then
            module_files=$(find ../shared/$module -name "*.cpp" -o -name "*.hpp" | wc -l | tr -d ' ')
            log_info "Module $module: $module_files fichiers"
        else
            log_warning "Module $module manquant"
        fi
    done
else
    log_error "Dossier shared manquant"
fi

# 7. V√©rifier l'√©tat Git
echo ""
echo "üìã V√âRIFICATION GIT:"
echo "---------------------"

if [ -d "../.git" ]; then
    if git status --porcelain >/dev/null 2>&1; then
        modified_files=$(git status --porcelain | wc -l | tr -d ' ')
        if [ "$modified_files" -gt 0 ]; then
            log_warning "$modified_files fichiers modifi√©s non committ√©s"
        else
            log_success "Repository Git propre"
        fi
    else
        log_warning "Impossible de v√©rifier l'√©tat Git"
    fi
else
    log_info "Pas de repository Git d√©tect√©"
fi

# 8. R√©sum√© final
echo ""
echo "====================================="
echo -e "${PURPLE}üìä R√âSULTATS DU DIAGNOSTIC${NC}"
echo ""
echo "üìà Statistiques:"
echo "   Erreurs: $errors"
echo "   Avertissements: $warnings"
echo "   Informations: $info"
echo ""

if [ $errors -gt 0 ]; then
    echo -e "${RED}üö® $errors ERREURS D√âTECT√âES${NC}"
    echo "   Consultez les messages d'erreur ci-dessus"
elif [ $warnings -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  $warnings AVERTISSEMENTS${NC}"
    echo "   Le projet peut fonctionner mais des optimisations sont possibles"
else
    echo -e "${GREEN}‚úÖ PROJET SAIN${NC}"
    echo "   Aucune erreur d√©tect√©e, tout semble en ordre"
fi

echo ""
echo "üí° CONSEILS:"
if [ $errors -gt 0 ]; then
    echo "   - Corrigez les erreurs avant de continuer"
fi
if [ $warnings -gt 0 ]; then
    echo "   - Consid√©rez r√©soudre les avertissements"
fi
echo "   - Utilisez 'make status' pour l'√©tat d√©taill√©"
echo "   - Utilisez './maintenance/clean_cache.sh' pour nettoyer"

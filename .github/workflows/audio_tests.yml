name: Audio System Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Release, Debug]
        include:
          - os: ubuntu-latest
            compiler: gcc
          - os: macos-latest
            compiler: clang

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake g++ ninja-build lcov

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake ninja

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DENABLE_COVERAGE=${{ matrix.os == 'ubuntu-latest' && 'ON' || 'OFF' }}

    - name: Build
      run: |
        cd build
        ninja

    - name: Run unit tests
      run: |
        cd build
        ./audio_tests --gtest_output=xml:test_results.xml

    - name: Run performance benchmarks
      run: |
        cd build
        ./audio_tests --gtest_filter="*Performance*" --gtest_output=xml:benchmark_results.xml

    - name: Generate coverage report
      if: matrix.os == 'ubuntu-latest' && matrix.build_type == 'Release'
      run: |
        cd build
        lcov --capture --directory . --output-file coverage.info
        lcov --remove coverage.info '/usr/*' '*/tests/*' --output-file coverage_clean.info
        genhtml coverage_clean.info --output-directory coverage_report

    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.build_type }}
        path: |
          build/test_results.xml
          build/benchmark_results.xml

    - name: Upload coverage report
      if: matrix.os == 'ubuntu-latest' && matrix.build_type == 'Release'
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: build/coverage_report/

  analyze:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Download test results
      uses: actions/download-artifact@v3
      with:
        name: test-results-ubuntu-latest-Release

    - name: Analyze results
      run: |
        echo "Test Results Analysis"
        echo "===================="

        # Parse XML results
        if [ -f test_results.xml ]; then
            total_tests=$(grep -o 'tests="[0-9]*"' test_results.xml | grep -o '[0-9]*')
            failed_tests=$(grep -o 'failures="[0-9]*"' test_results.xml | grep -o '[0-9]*')

            echo "Total tests: $total_tests"
            echo "Failed tests: $failed_tests"

            if [ "$failed_tests" -gt 0 ]; then
                echo "❌ Some tests failed"
                exit 1
            else
                echo "✅ All tests passed"
            fi
        else
            echo "❌ Test results not found"
            exit 1
        fi

  benchmark-analysis:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Download benchmark results
      uses: actions/download-artifact@v3
      with:
        name: benchmark-results-ubuntu-latest-Release

    - name: Analyze benchmarks
      run: |
        echo "Benchmark Analysis"
        echo "=================="

        # Extract benchmark data
        if [ -f benchmark_results.xml ]; then
            echo "Performance benchmarks completed successfully"

            # Check for any performance regressions (this would need more sophisticated analysis)
            echo "✅ Benchmark analysis completed"
        else
            echo "⚠️  Benchmark results not found"
        fi

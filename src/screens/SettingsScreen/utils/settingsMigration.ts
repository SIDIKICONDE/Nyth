import AsyncStorage from '@react-native-async-storage/async-storage';
import { RecordingSettings } from '../../../types';
import { DEFAULT_RECORDING_SETTINGS } from './settingsDefaults';
import { createLogger } from '../../../utils/optimizedLogger';

const logger = createLogger('SettingsMigration');

/**
 * Migre les anciens param√®tres vers le nouveau format
 */
export const migrateSettings = async (): Promise<RecordingSettings> => {
  try {
    const savedSettings = await AsyncStorage.getItem('recordingSettings');
    
    if (!savedSettings) {
      logger.info('‚úÖ Aucun param√®tre sauvegard√©, utilisation des valeurs par d√©faut');
      return DEFAULT_RECORDING_SETTINGS;
    }

    const parsedSettings = JSON.parse(savedSettings);
    logger.info('üì¶ Param√®tres charg√©s depuis le stockage');

    // V√©rifier si les param√®tres audio/vid√©o sont corrects
    const needsMigration = 
      parsedSettings.isMicEnabled === false ||
      parsedSettings.isVideoEnabled === false ||
      parsedSettings.audioEnabled === false ||
      parsedSettings.videoEnabled === false;

    if (needsMigration) {
      logger.warn('‚ö†Ô∏è Param√®tres audio/vid√©o d√©sactiv√©s d√©tect√©s, migration n√©cessaire');
      
      // Forcer l'activation des param√®tres audio/vid√©o
      const migratedSettings = {
        ...DEFAULT_RECORDING_SETTINGS,
        ...parsedSettings,
        // Forcer l'activation
        isMicEnabled: true,
        isVideoEnabled: true,
        audioEnabled: true,
        videoEnabled: true,
        // Pr√©server les autres param√®tres utilisateur
        fontSize: parsedSettings.fontSize || DEFAULT_RECORDING_SETTINGS.fontSize,
        textColor: parsedSettings.textColor || DEFAULT_RECORDING_SETTINGS.textColor,
        scrollSpeed: parsedSettings.scrollSpeed || DEFAULT_RECORDING_SETTINGS.scrollSpeed,
        // S'assurer que videoSettings existe
        videoSettings: {
          ...DEFAULT_RECORDING_SETTINGS.videoSettings,
          ...(parsedSettings.videoSettings || {})
        }
      };

      // Sauvegarder les param√®tres migr√©s
      await AsyncStorage.setItem('recordingSettings', JSON.stringify(migratedSettings));
      logger.info('‚úÖ Param√®tres migr√©s et sauvegard√©s');
      
      return migratedSettings;
    }

    // Fusionner avec les valeurs par d√©faut pour les nouveaux param√®tres
    const mergedSettings = {
      ...DEFAULT_RECORDING_SETTINGS,
      ...parsedSettings,
      videoSettings: {
        ...DEFAULT_RECORDING_SETTINGS.videoSettings,
        ...(parsedSettings.videoSettings || {})
      }
    };

    logger.info('‚úÖ Param√®tres fusionn√©s avec les valeurs par d√©faut');
    return mergedSettings;

  } catch (error) {
    logger.error('‚ùå Erreur lors de la migration des param√®tres:', error);
    return DEFAULT_RECORDING_SETTINGS;
  }
};

/**
 * Force la r√©initialisation des param√®tres audio/vid√©o
 */
export const forceEnableAudioVideo = async (): Promise<void> => {
  try {
    const savedSettings = await AsyncStorage.getItem('recordingSettings');
    
    if (savedSettings) {
      const parsedSettings = JSON.parse(savedSettings);
      
      const updatedSettings = {
        ...parsedSettings,
        isMicEnabled: true,
        isVideoEnabled: true,
        audioEnabled: true,
        videoEnabled: true
      };

      await AsyncStorage.setItem('recordingSettings', JSON.stringify(updatedSettings));
      logger.info('‚úÖ Param√®tres audio/vid√©o forc√©s √† activ√©');
    }
  } catch (error) {
    logger.error('‚ùå Erreur lors de la force d\'activation audio/vid√©o:', error);
  }
}; 
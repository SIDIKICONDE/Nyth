import React, { useEffect, useRef, useState } from "react";
import { getAuth } from "@react-native-firebase/auth";
import {
  initializeFirebase,
  setupFirebaseServices,
} from "../../config/firebase";
import { DefaultApiKeyService } from "../../services/defaultApiKey";
import { migrationService } from "../../services/firebase";
import { AuthContext } from "./context";
import {
  changeUserEmail,
  changeUserPassword,
  createAccount,
  deleteUserAccount,
  sendPasswordReset,
  signInWithEmail,
  signOutFirebase,
  updateUserProfileFirebase,
} from "./firebase";
import { createOptimizedLogger } from '../../utils/optimizedLogger';
const logger = createOptimizedLogger('AuthProvider');

// Utilisation de la version native avec EAS Build
import {
  clearAuthStorage,
  getSavedUser,
  saveUser,
  setFirebaseSession,
} from "./storage";
import { createUserProfile, syncLocalDataToFirebase } from "./syncUtils";
import { AuthProviderProps, User } from "./types";
import {
  cleanupRef,
  delay,
  handleAuthError,
  isMounted,
  notifyStateChange,
} from "./utils";
// Import des connexions sociales (impl√©mentation unifi√©e)
import {
  configureGoogleSignIn as configureGoogleSignInSocial,
  signInWithApple as signInWithAppleSocial,
  signInWithGoogle as signInWithGoogleSocial,
  signOutGoogle as signOutGoogleSocial,
} from "./socialAuth";

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isFirebaseReady, setFirebaseReady] = useState(false);

  // R√©f√©rences pour √©viter les fuites m√©moire et optimiser les re-rendus
  const isMountedRef = useRef(true);
  const authStateListenerRef = useRef<(() => void) | null>(null);
  const lastUserStateRef = useRef<string>("");

  /**
   * Force la mise √† jour de l'√©tat d'authentification
   */
  const refreshAuthState = async () => {
    try {
      logger.debug("üîÑ Rafra√Æchissement forc√© de l'√©tat d'authentification...");

      // V√©rifier l'utilisateur Firebase
      const currentAuthUser = getAuth().currentUser;
      if (currentAuthUser) {
        logger.debug(
          "üî• Utilisateur Firebase d√©tect√© lors du rafra√Æchissement:",
          currentAuthUser.uid
        );

        const userData: User = {
          uid: currentAuthUser.uid,
          email: currentAuthUser.email,
          name: currentAuthUser.displayName,
          displayName: currentAuthUser.displayName,
          photoURL: currentAuthUser.photoURL,
          emailVerified: currentAuthUser.emailVerified,
          isGuest: false,
        };

        if (isMounted(isMountedRef)) {
          setUser(userData);
          setLoading(false);
        }
        return;
      }

      // Aucun utilisateur trouv√©
      logger.debug("‚ùå Aucun utilisateur trouv√© lors du rafra√Æchissement");
      if (isMounted(isMountedRef)) {
        setUser(null);
        setLoading(false);
      }
    } catch (error) {
      logger.error(
        "‚ùå Erreur lors du rafra√Æchissement de l'√©tat d'auth:",
        error
      );
      if (isMounted(isMountedRef)) {
        setLoading(false);
      }
    }
  };

  /**
   * Initialise l'authentification et configure les √©couteurs
   */
  const initializeAuth = async () => {
    try {
      logger.debug("üöÄ Initialisation de l'authentification...");

      // Initialiser Firebase et attendre que ce soit pr√™t
      const firebaseOk = await initializeFirebase();
      if (firebaseOk) {
        setupFirebaseServices(); // Configurer les services apr√®s initialisation
        setFirebaseReady(true);
        logger.debug("‚úÖ Firebase est pr√™t.");
      } else {
        logger.warn("‚ö†Ô∏è L'initialisation de Firebase a √©chou√©.");
        setFirebaseReady(false);
        setLoading(false);
        return;
      }

      // Configurer Google Sign-In
      const googleConfigured = configureGoogleSignInSocial();
      if (googleConfigured) {
        logger.debug("‚úÖ Google Sign-In configur√©");
      } else {
        logger.warn("‚ö†Ô∏è Impossible de configurer Google Sign-In");
      }

      // V√©rifier l'√©tat actuel de l'authentification
      try {
        const currentAuthUser = getAuth().currentUser;
        if (currentAuthUser) {
          logger.debug(
            "üî• Utilisateur Firebase d√©j√† connect√©:",
            currentAuthUser.uid
          );

          // Forcer le rafra√Æchissement du token pour s'assurer qu'il est valide
          try {
            await currentAuthUser.getIdToken(true);
            logger.debug("‚úÖ Token Firebase valide");
          } catch (tokenError) {
            logger.error(
              "‚ùå Token invalide, d√©connexion n√©cessaire:",
              tokenError
            );
            await getAuth().signOut();
          }
        }
      } catch (authError) {
        logger.warn(
          "‚ö†Ô∏è Erreur lors de la v√©rification de l'authentification:",
          authError
        );
      }
    } catch (err) {
      logger.error("Erreur initialisation auth:", err);
      setLoading(false);
    }
  };

  /**
   * Configure l'√©couteur d'√©tat d'authentification Firebase
   */
  const setupAuthStateListener = () => {
    try {
      if (!isFirebaseReady) {
        logger.warn(
          "‚ö†Ô∏è Firebase non pr√™t, l'√©couteur d'authentification ne sera pas configur√©."
        );
        setLoading(false);
        return () => {};
      }
      const unsubscribe = getAuth().onAuthStateChanged(async (firebaseUser) => {
        if (!isMounted(isMountedRef)) return;

        logger.debug("üîÑ onAuthStateChanged d√©clench√©:", firebaseUser?.uid);

        if (firebaseUser) {
          // Utilisateur Firebase connect√©
          const userData: User = {
            uid: firebaseUser.uid,
            email: firebaseUser.email,
            name: firebaseUser.displayName,
            displayName: firebaseUser.displayName,
            photoURL: firebaseUser.photoURL,
            emailVerified: firebaseUser.emailVerified,
            isGuest: false,
          };

          logger.debug("üî• Utilisateur Firebase d√©tect√©:", userData);
          setUser(userData);

          // Configurer automatiquement la cl√© OpenAI par d√©faut
          DefaultApiKeyService.configureDefaultOpenAIKey()
            .then((configured) => {
              if (configured) {
                logger.debug("‚úÖ Cl√© OpenAI par d√©faut configur√©e avec succ√®s");
              }
            })
            .catch((error) => {
              logger.warn(
                "‚ö†Ô∏è Impossible de configurer la cl√© OpenAI par d√©faut:",
                error
              );
            });

          // Sauvegarder localement
          await saveUser(userData);
          await setFirebaseSession(true);

          // Migrer les donn√©es existantes vers Firebase (si n√©cessaire)
          try {
            await migrationService.migrateToFirebase(firebaseUser.uid);
          } catch (err) {
            logger.error("Erreur migration:", err);
          }
        } else {
          // Utilisateur Firebase d√©connect√©
          logger.debug("‚ùå Utilisateur Firebase d√©connect√©");

          // Aucun utilisateur
          setUser(null);
          await notifyStateChange(null, "firebase_signout", lastUserStateRef);
          await clearAuthStorage();
        }

        if (isMounted(isMountedRef)) {
          setLoading(false);
        }
      });

      authStateListenerRef.current = unsubscribe;
      return unsubscribe;
    } catch (error) {
      logger.warn(
        "‚ö†Ô∏è Impossible de configurer l'√©couteur d'authentification Firebase:",
        error
      );
      setLoading(false);
      return () => {};
    }
  };

  // Initialisation lors du montage
  useEffect(() => {
    isMountedRef.current = true;

    const initialize = async () => {
      // Configuration pour EAS Build (version native)
      logger.debug("üöÄ Configuration pour EAS Build (version native)");

      await initializeAuth();
    };

    initialize();

    // Nettoyage lors du d√©montage
    return () => {
      isMountedRef.current = false;
      cleanupRef(authStateListenerRef);
    };
  }, []);

  // Mettre en place l'√©couteur seulement si Firebase est pr√™t
  useEffect(() => {
    if (isFirebaseReady) {
      logger.debug("üî• Firebase est pr√™t, configuration de l'√©couteur d'√©tat.");
      setupAuthStateListener();
    }
  }, [isFirebaseReady]);

  /**
   * Connexion avec email et mot de passe
   */
  const signIn = async (email: string, password: string): Promise<boolean> => {
    try {
      setError(null);
      setLoading(true);

      const result = await signInWithEmail(email, password);

      if (!result.success) {
        setError(result.error || "Erreur lors de la connexion");
        return false;
      }

      // Configurer automatiquement la cl√© OpenAI par d√©faut apr√®s connexion
      DefaultApiKeyService.configureDefaultOpenAIKey()
        .then((configured) => {
          if (configured) {
            logger.debug("‚úÖ Cl√© OpenAI par d√©faut configur√©e apr√®s connexion");
          }
        })
        .catch((error) => {
          logger.warn(
            "‚ö†Ô∏è Impossible de configurer la cl√© OpenAI apr√®s connexion:",
            error
          );
        });

      logger.debug("‚úÖ Connexion r√©ussie");
      return true;
    } catch (err: any) {
      handleAuthError(err, setError, "Erreur lors de la connexion");
      return false;
    } finally {
      setLoading(false);
    }
  };

  /**
   * Connexion en mode invit√©
   */
  const signInAsGuest = async (): Promise<boolean> => {
    try {
      setError(null);
      setLoading(true);

      // Cr√©er un utilisateur invit√© avec un UID unique
      const guestId = `guest_${Date.now()}_${Math.random()
        .toString(36)
        .substr(2, 9)}`;

      const guestUser: User = {
        uid: guestId,
        email: null,
        name: "Invit√©",
        displayName: "Invit√©",
        photoURL: null,
        emailVerified: false,
        isGuest: true,
      };

      logger.debug("üë§ Cr√©ation utilisateur invit√©:", guestId);

      // Sauvegarder l'utilisateur invit√© localement
      setUser(guestUser);
      await saveUser(guestUser);

      // Notifier le changement d'√©tat
      await notifyStateChange(guestUser, "guest_signin", lastUserStateRef);

      logger.debug("‚úÖ Connexion invit√© r√©ussie");
      return true;
    } catch (err: any) {
      handleAuthError(err, setError, "Erreur lors de la connexion invit√©");
      return false;
    } finally {
      setLoading(false);
    }
  };

  /**
   * Inscription avec email, mot de passe et nom
   */
  const signUp = async (
    email: string,
    password: string,
    name: string
  ): Promise<boolean> => {
    try {
      setError(null);
      setLoading(true);

      // Cr√©er le compte Firebase
      const result = await createAccount(email, password, name);

      if (!result.success) {
        setError(result.error || "Erreur lors de l'inscription");
        return false;
      }

      // Cr√©er le profil dans Firestore
      await createUserProfile(result.user.uid, email, name);

      // Synchroniser aussi les donn√©es existantes d'un utilisateur d√©j√† connect√©
      await syncLocalDataToFirebase(result.user.uid, result.user.uid);

      // D√©finir l'utilisateur dans l'√©tat local imm√©diatement
      setUser(result.user);
      await saveUser(result.user);

      // Configurer automatiquement la cl√© OpenAI par d√©faut apr√®s inscription
      DefaultApiKeyService.configureDefaultOpenAIKey()
        .then((configured) => {
          if (configured) {
            logger.debug(
              "‚úÖ Cl√© OpenAI par d√©faut configur√©e apr√®s inscription"
            );
          }
        })
        .catch((error) => {
          logger.warn(
            "‚ö†Ô∏è Impossible de configurer la cl√© OpenAI apr√®s inscription:",
            error
          );
        });

      logger.debug("‚úÖ Compte cr√©√© avec succ√®s");
      return true;
    } catch (err: any) {
      handleAuthError(err, setError, "Erreur lors de l'inscription");
      return false;
    } finally {
      setLoading(false);
    }
  };

  /**
   * D√©connexion
   */
  const logout = async () => {
    try {
      setLoading(true);

      const currentUserData = user;

      logger.debug("üì§ D√©but de la d√©connexion:", {
        currentUser: currentUserData?.uid,
        userType: currentUserData?.isGuest ? "Invit√©" : "Firebase",
      });

      if (currentUserData && !currentUserData.isGuest) {
        logger.debug(
          "üî• D√©connexion utilisateur Firebase:",
          currentUserData.uid
        );

        // D√©connecter des services sociaux
        try {
          await signOutGoogleSocial();
        } catch (socialError) {
          logger.warn("‚ö†Ô∏è Erreur d√©connexion Google:", socialError);
        }

        // Pour un utilisateur Firebase, effacer d'abord les donn√©es locales
        await clearAuthStorage(currentUserData.uid);

        // Puis utiliser signOut de Firebase
        const result = await signOutFirebase();
        if (!result.success) {
          setError(result.error || "Erreur lors de la d√©connexion");
          return;
        }

        // Mettre √† jour l'√©tat imm√©diatement
        if (isMounted(isMountedRef)) {
          setUser(null);
          await notifyStateChange(null, "firebase_signout", lastUserStateRef);
        }

        logger.debug("‚úÖ D√©connexion Firebase r√©ussie");
      } else {
        // Cas de s√©curit√© : nettoyer tout
        logger.debug("‚ö†Ô∏è √âtat incoh√©rent d√©tect√©, nettoyage complet");

        await clearAuthStorage();

        try {
          await signOutFirebase();
          await signOutGoogleSocial();
        } catch (err) {
          logger.warn("Erreur signOut (ignor√©e):", err);
        }

        if (isMounted(isMountedRef)) {
          setUser(null);
          await notifyStateChange(null, "logout_cleanup", lastUserStateRef);
        }
      }
    } catch (err) {
      handleAuthError(err, setError, "Erreur lors de la d√©connexion");

      // En cas d'erreur, forcer un √©tat propre
      if (isMounted(isMountedRef)) {
        setUser(null);
        await notifyStateChange(null, "logout_error", lastUserStateRef);
      }
    } finally {
      if (isMounted(isMountedRef)) {
        setLoading(false);
      }
    }
  };

  /**
   * Met √† jour le profil utilisateur
   */
  const updateUserProfile = async (updates: {
    name?: string;
    photoURL?: string;
  }): Promise<boolean> => {
    try {
      setError(null);

      if (!user) {
        setError("Utilisateur non connect√©");
        return false;
      }

      const result = await updateUserProfileFirebase(updates);

      if (!result.success) {
        setError(result.error || "Erreur lors de la mise √† jour du profil");
        return false;
      }

      // Mettre √† jour l'√©tat local
      setUser((prev) => {
        if (!prev) return null;

        const updatedUser = { ...prev };
        if (updates.name !== undefined) {
          updatedUser.name = updates.name;
          updatedUser.displayName = updates.name;
        }
        if (updates.photoURL !== undefined) {
          updatedUser.photoURL = updates.photoURL;
        }

        // Sauvegarder dans AsyncStorage
        saveUser(updatedUser);

        return updatedUser;
      });

      logger.debug("‚úÖ Profil mis √† jour avec succ√®s");
      return true;
    } catch (err) {
      handleAuthError(err, setError, "Erreur lors de la mise √† jour du profil");
      return false;
    }
  };

  /**
   * R√©initialise le mot de passe
   */
  const resetPassword = async (email: string): Promise<boolean> => {
    try {
      setError(null);

      const result = await sendPasswordReset(email);

      if (!result.success) {
        setError(result.error || "Erreur lors de l'envoi de l'email");
        return false;
      }

      logger.debug("‚úÖ Email de r√©initialisation envoy√©");
      return true;
    } catch (err: any) {
      handleAuthError(err, setError, "Erreur lors de l'envoi de l'email");
      return false;
    }
  };

  /**
   * Change l'email de l'utilisateur
   */
  const changeEmail = async (
    newEmail: string,
    currentPassword: string
  ): Promise<boolean> => {
    try {
      setError(null);

      const result = await changeUserEmail(newEmail, currentPassword);

      if (!result.success) {
        setError(result.error || "Erreur lors du changement d'email");
        return false;
      }

      logger.debug("‚úÖ Email mis √† jour");
      return true;
    } catch (err: any) {
      handleAuthError(err, setError, "Erreur lors du changement d'email");
      return false;
    }
  };

  /**
   * Change le mot de passe de l'utilisateur
   */
  const changePassword = async (
    currentPassword: string,
    newPassword: string
  ): Promise<boolean> => {
    try {
      setError(null);

      const result = await changeUserPassword(currentPassword, newPassword);

      if (!result.success) {
        setError(result.error || "Erreur lors du changement de mot de passe");
        return false;
      }

      logger.debug("‚úÖ Mot de passe mis √† jour");
      return true;
    } catch (err: any) {
      handleAuthError(
        err,
        setError,
        "Erreur lors du changement de mot de passe"
      );
      return false;
    }
  };

  /**
   * Supprime le compte utilisateur
   */
  const deleteAccount = async (password: string): Promise<boolean> => {
    try {
      setError(null);

      const result = await deleteUserAccount(password);

      if (!result.success) {
        setError(result.error || "Erreur lors de la suppression du compte");
        return false;
      }

      logger.debug("‚úÖ Compte supprim√©");
      return true;
    } catch (err: any) {
      handleAuthError(err, setError, "Erreur lors de la suppression du compte");
      return false;
    }
  };

  /**
   * Connexion avec Google (version native avec EAS Build)
   */
  const handleGoogleSignIn = async (): Promise<boolean> => {
    try {
      setError(null);
      setLoading(true);

      const result = await signInWithGoogleSocial();

      if (!result.success) {
        setError(result.error || "Erreur lors de la connexion Google");
        return false;
      }

      // L'utilisateur sera automatiquement d√©fini par l'√©couteur Firebase
      logger.debug("‚úÖ Connexion Google r√©ussie");
      return true;
    } catch (err: any) {
      handleAuthError(err, setError, "Erreur lors de la connexion Google");
      return false;
    } finally {
      setLoading(false);
    }
  };

  /**
   * Connexion avec Apple (version native avec EAS Build)
   */
  const handleAppleSignIn = async (): Promise<boolean> => {
    try {
      setError(null);
      setLoading(true);

      const result = await signInWithAppleSocial();

      if (!result.success) {
        setError(result.error || "Erreur lors de la connexion Apple");
        return false;
      }

      // L'utilisateur sera automatiquement d√©fini par l'√©couteur Firebase
      logger.debug("‚úÖ Connexion Apple r√©ussie");
      return true;
    } catch (err: any) {
      handleAuthError(err, setError, "Erreur lors de la connexion Apple");
      return false;
    } finally {
      setLoading(false);
    }
  };

  const value = {
    user,
    currentUser: user,
    loading,
    isLoading: loading,
    error,
    // Actions
    signIn,
    signUp,
    signInAsGuest,
    signInWithGoogle: handleGoogleSignIn,
    signInWithApple: handleAppleSignIn,
    logout,
    updateUserProfile,
    resetPassword,
    changeEmail,
    changePassword,
    deleteAccount,

    // Utils
    refreshAuthState,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

import { useFocusEffect } from "@react-navigation/native";
import React, { useEffect, useRef, useCallback } from "react";
import {
  Alert,
  Text,
  View,
  Platform,
  AppState,
  AppStateStatus,
} from "react-native";
import Animated, { FadeIn, FadeInDown, Layout } from "react-native-reanimated";
import tw from "twrnc";
import { useTheme } from "../../../contexts/ThemeContext";
import { useBiometricAuth } from "../../../hooks/useBiometricAuth";
import { useTranslation } from "../../../hooks/useTranslation";
import { checkHasAnyApiKey } from "../../../utils/checkApiKeys";
import ReactNativeBiometrics from "react-native-biometrics";

import { createOptimizedLogger } from '../../../utils/optimizedLogger';
const logger = createOptimizedLogger('BiometricSettings');

// Sous-composants
import { BiometricHeader } from "./BiometricHeader";
import { BiometricOption } from "./BiometricOption";
import { InfoCard } from "./InfoCard";
import { NotSupportedView } from "./NotSupportedView";
import { UpdateKey } from "./types";

// Fonction d'authentification native React Native
// Supprimer la fonction performNativeAuthentication simul√©e

export const BiometricSettings: React.FC = () => {
  const { currentTheme } = useTheme();
  const { t } = useTranslation();
  const {
    isSupported,
    isEnrolled,
    isEnabled,
    settings,
    toggleBiometric,
    updateRequirements,
    loadSettings,
  } = useBiometricAuth();

  // √âtats locaux pour g√©rer le chargement
  const [isUpdating, setIsUpdating] = React.useState<UpdateKey>(null);
  const [hasApiKeys, setHasApiKeys] = React.useState(false);
  const [isCheckingKeys, setIsCheckingKeys] = React.useState(true);
  // Recharger les param√®tres au montage et v√©rifier les cl√©s API
  useEffect(() => {
    const init = async () => {
      setIsCheckingKeys(true);
      await loadSettings();
      const hasKeys = await checkHasAnyApiKey();
      setHasApiKeys(hasKeys);
      setIsCheckingKeys(false);
    };
    init();
  }, []);

  // Fonction partag√©e pour (re)v√©rifier la pr√©sence des cl√©s API
  const refreshApiKeys = useCallback(async () => {
    const hasKeys = await checkHasAnyApiKey();
    setHasApiKeys((prev) => (prev !== hasKeys ? hasKeys : prev));
  }, []);

  // √âcouter les transitions d'√©tat de l'app pour recharger les cl√©s API
  const appState = useRef<AppStateStatus>(AppState.currentState);

  useEffect(() => {
    const subscription = AppState.addEventListener("change", (nextState) => {
      if (
        appState.current.match(/inactive|background/) &&
        nextState === "active"
      ) {
        refreshApiKeys();
      }
      appState.current = nextState;
    });

    return () => {
      subscription.remove();
    };
  }, [refreshApiKeys]);

  useFocusEffect(
    React.useCallback(() => {
      refreshApiKeys();
    }, [refreshApiKeys])
  );

  const handleToggleEnabled = async (value: boolean) => {
    // V√©rifier d'abord s'il y a des cl√©s API
    if (value && !hasApiKeys) {
      Alert.alert(
        t("biometric.noApiKeys.title", "üîë Aucune cl√© API"),
        t(
          "biometric.noApiKeys.message",
          "Vous devez d'abord configurer au moins une cl√© API avant d'activer la protection biom√©trique."
        ),
        [
          {
            text: t("common.cancel"),
            style: "cancel",
          },
          {
            text: t("biometric.noApiKeys.configure", "Configurer"),
            onPress: () => {
              // Navigation vers les param√®tres AI est d√©j√† g√©r√©e par le bouton retour
            },
          },
        ]
      );
      return;
    }

    if (value && !isEnrolled) {
      Alert.alert(
        t("biometric.notEnrolled.title", "Biom√©trie non configur√©e"),
        t(
          "biometric.notEnrolled.message",
          "Veuillez configurer Face ID/Touch ID dans les param√®tres de votre appareil."
        ),
        [{ text: t("common.ok") }]
      );
      return;
    }

    setIsUpdating("main");

    if (value) {
      // Test d'authentification avant d'activer
      try {
        const rnBiometrics = new ReactNativeBiometrics();
        const { success } = await rnBiometrics.simplePrompt({
          promptMessage: t(
            "biometric.enablePrompt",
            "Authentifiez-vous pour activer la protection biom√©trique"
          ),
        });
        if (!success) {
          setIsUpdating(null);
          return;
        }
      } catch (error) {
        logger.error("Erreur authentification:", error);
        setIsUpdating(null);
        return;
      }
    }

    const success = await toggleBiometric(value);
    if (!success && value) {
      Alert.alert(
        t("common.error"),
        t("biometric.enableError", "Impossible d'activer la biom√©trie"),
        [{ text: t("common.ok") }]
      );
    }

    // Recharger les param√®tres apr√®s modification
    await loadSettings();
    setIsUpdating(null);
  };

  const handleToggleOption = async (
    key: "requiredForApiKeys" | "requiredForSettings",
    value: boolean
  ) => {
    setIsUpdating(key);
    await updateRequirements({ [key]: value });
    // Recharger les param√®tres pour s'assurer que l'UI est synchronis√©e
    await loadSettings();
    setIsUpdating(null);
  };

  // Si la biom√©trie n'est pas support√©e
  if (!isSupported) {
    return <NotSupportedView />;
  }

  // Si on v√©rifie encore les cl√©s API
  if (isCheckingKeys) {
    return (
      <View style={tw`p-4 items-center justify-center`}>
        <Text style={[tw`text-base`, { color: currentTheme.colors.text }]}>
          {t("common.loading")}...
        </Text>
      </View>
    );
  }

  return (
    <Animated.View entering={FadeIn.duration(300)} style={tw`p-4`}>
      {/* Message d'avertissement si pas de cl√©s API */}
      {!hasApiKeys && (
        <InfoCard
          type="warning"
          title={t(
            "biometric.noApiKeys.warning",
            "‚ö†Ô∏è Aucune cl√© API configur√©e"
          )}
          message={t(
            "biometric.noApiKeys.warningMessage",
            "Configurez au moins une cl√© API avant d'activer la protection biom√©trique."
          )}
          delay={0}
        />
      )}

      {/* En-t√™te principal */}
      <BiometricHeader
        isEnabled={isEnabled}
        isEnrolled={isEnrolled}
        isUpdating={isUpdating}
        onToggle={handleToggleEnabled}
        disabled={!hasApiKeys}
      />

      {/* Options d√©taill√©es avec animations */}
      {isEnabled && hasApiKeys && (
        <Animated.View
          entering={FadeInDown.delay(100).springify()}
          layout={Layout.springify()}
          style={tw`mt-4`}
        >
          {/* Option: Protection des cl√©s API */}
          <View style={tw`mb-3`}>
            <BiometricOption
              icon="key-variant"
              iconColor={currentTheme.colors.primary}
              title={t("biometric.requireForApiKeys", "Cl√©s API")}
              description={t(
                "biometric.requireForApiKeysDesc",
                "Prot√©ger l'acc√®s aux cl√©s API"
              )}
              value={settings.requiredForApiKeys || false}
              onValueChange={(value) =>
                handleToggleOption("requiredForApiKeys", value)
              }
              disabled={isUpdating === "requiredForApiKeys"}
              isActive={settings.requiredForApiKeys}
            />
          </View>

          {/* Option: Protection des param√®tres */}
          <BiometricOption
            icon="cog-outline"
            iconColor={currentTheme.colors.primary}
            title={t("biometric.requireForSettings", "Param√®tres AI")}
            description={t(
              "biometric.requireForSettingsDesc",
              "S√©curiser l'acc√®s aux param√®tres"
            )}
            value={settings.requiredForSettings || false}
            onValueChange={(value) =>
              handleToggleOption("requiredForSettings", value)
            }
            disabled={isUpdating === "requiredForSettings"}
            isActive={settings.requiredForSettings}
          />
        </Animated.View>
      )}

      {/* Information sur la configuration requise */}
      {!isEnrolled && (
        <InfoCard
          type="warning"
          title={t("biometric.setupRequired", "Configuration requise")}
          message={t(
            "biometric.setupRequiredDesc",
            "Pour utiliser cette fonctionnalit√©, configurez Face ID ou Touch ID dans R√©glages > Face ID & Code"
          )}
          delay={200}
        />
      )}

      {/* Carte d'information sur la s√©curit√© */}
      {isEnabled && (
        <InfoCard
          type="security"
          message={t(
            "biometric.securityInfo",
            "Vos donn√©es biom√©triques restent sur votre appareil et ne sont jamais partag√©es."
          )}
          description={t(
            "biometric.authValidity",
            "Authentification valide pendant 5 minutes"
          )}
          delay={300}
        />
      )}

      {/* Nouvelle carte d'information sur le fonctionnement */}
      {isEnabled && isEnrolled && (
        <InfoCard
          type="info"
          title="üí° Comment √ßa marche"
          message="Face ID s'affiche en premier. Si vous pr√©f√©rez utiliser votre code, appuyez sur 'Entrer le code' pour passer au clavier."
          delay={400}
        />
      )}
    </Animated.View>
  );
};

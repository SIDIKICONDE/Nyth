import AsyncStorage from "@react-native-async-storage/async-storage";
import { SecureApiKeyManager } from "../services/ai/SecureApiKeyManager";
import { createOptimizedLogger } from "./optimizedLogger";

const logger = createOptimizedLogger("TestApiPersistence");

export async function testApiPersistence() {
  logger.info("üß™ Test de persistance des cl√©s API");
  
  try {
    // Test 1: V√©rifier le stockage direct
    logger.info("\nüìù Test 1: Stockage direct");
    const testKey = "test-key-123";
    await SecureApiKeyManager.saveApiKey("openai", testKey);
    
    const retrievedKey = await SecureApiKeyManager.getApiKey("openai");
    logger.info(`Cl√© r√©cup√©r√©e apr√®s sauvegarde: ${retrievedKey ? "‚úÖ" : "‚ùå"}`);
    
    // Test 2: V√©rifier apr√®s un d√©lai
    logger.info("\n‚è±Ô∏è Test 2: V√©rification apr√®s d√©lai");
    await new Promise(resolve => setTimeout(resolve, 3000));
    const keyAfterDelay = await SecureApiKeyManager.getApiKey("openai");
    logger.info(`Cl√© toujours pr√©sente apr√®s 3s: ${keyAfterDelay ? "‚úÖ" : "‚ùå"}`);
    
    // Test 3: V√©rifier les m√©tadonn√©es
    logger.info("\nüìä Test 3: M√©tadonn√©es");
    const metadata = await AsyncStorage.getItem("openai_metadata");
    if (metadata) {
      const parsed = JSON.parse(metadata);
      logger.info("M√©tadonn√©es:", {
        provider: parsed.provider,
        hasKey: parsed.hasKey,
        createdAt: parsed.createdAt,
        expiresAt: parsed.expiresAt,
        isExpired: new Date(parsed.expiresAt) < new Date()
      });
    }
    
    // Test 4: V√©rifier tous les stockages
    logger.info("\nüóÑÔ∏è Test 4: Tous les stockages");
    const allKeys = await AsyncStorage.getAllKeys();
    const apiRelatedKeys = allKeys.filter(key => 
      key.includes("api") || 
      key.includes("key") || 
      key.includes("openai") ||
      key.includes("secure")
    );
    logger.info("Cl√©s li√©es aux API trouv√©es:", apiRelatedKeys);
    
    // Test 5: V√©rifier l'expiration
    logger.info("\n‚è∞ Test 5: Expiration");
    const now = new Date();
    const expirationDate = new Date(now.getTime() + 365 * 24 * 60 * 60 * 1000);
    logger.info(`Date actuelle: ${now.toISOString()}`);
    logger.info(`Date d'expiration th√©orique: ${expirationDate.toISOString()}`);
    
    return {
      success: !!retrievedKey && !!keyAfterDelay,
      details: {
        immediateRetrieval: !!retrievedKey,
        delayedRetrieval: !!keyAfterDelay,
        metadataPresent: !!metadata,
        relatedKeysCount: apiRelatedKeys.length
      }
    };
    
  } catch (error) {
    logger.error("‚ùå Erreur pendant le test:", error);
    return { success: false, error };
  }
}

// Fonction pour nettoyer apr√®s le test
export async function cleanupTestData() {
  await SecureApiKeyManager.deleteApiKey("openai");
  logger.info("üßπ Donn√©es de test nettoy√©es");
}

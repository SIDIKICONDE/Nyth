import AsyncStorage from "@react-native-async-storage/async-storage";
import { createLogger } from "./optimizedLogger";

const logger = createLogger("ForceEnableMedia");

/**
 * Force l'activation du micro et de la cam√©ra dans tous les param√®tres sauvegard√©s
 */
export const forceEnableMediaSettings = async (): Promise<void> => {
  try {
    logger.info("üé§üìπ For√ßage de l'activation du micro et de la cam√©ra...");

    // 1. Param√®tres d'enregistrement
    const recordingSettingsKey = "recordingSettings";
    const recordingSettings = await AsyncStorage.getItem(recordingSettingsKey);

    if (recordingSettings) {
      const parsed = JSON.parse(recordingSettings);
      const updated = {
        ...parsed,
        isMicEnabled: true,
        isVideoEnabled: true,
        audioEnabled: true,
        videoEnabled: true,
      };

      await AsyncStorage.setItem(recordingSettingsKey, JSON.stringify(updated));
      logger.info("‚úÖ Param√®tres d'enregistrement mis √† jour");
    }

    // 2. Param√®tres globaux (si diff√©rents)
    const globalSettingsKey = "@global_recording_settings";
    const globalSettings = await AsyncStorage.getItem(globalSettingsKey);

    if (globalSettings) {
      const parsed = JSON.parse(globalSettings);
      const updated = {
        ...parsed,
        isMicEnabled: true,
        isVideoEnabled: true,
        audioEnabled: true,
        videoEnabled: true,
      };

      await AsyncStorage.setItem(globalSettingsKey, JSON.stringify(updated));
      logger.info("‚úÖ Param√®tres globaux mis √† jour");
    }

    // 3. V√©rifier aussi les cl√©s utilisateur sp√©cifiques
    const allKeys = await AsyncStorage.getAllKeys();
    const userSettingsKeys = allKeys.filter(
      (key) =>
        key.includes("recording_settings") || key.includes("recordingSettings")
    );

    for (const key of userSettingsKeys) {
      try {
        const value = await AsyncStorage.getItem(key);
        if (value) {
          const parsed = JSON.parse(value);
          const updated = {
            ...parsed,
            isMicEnabled: true,
            isVideoEnabled: true,
            audioEnabled: true,
            videoEnabled: true,
          };

          await AsyncStorage.setItem(key, JSON.stringify(updated));
          logger.info(`‚úÖ Param√®tres utilisateur ${key} mis √† jour`);
        }
      } catch (error) {
        logger.error(`‚ùå Erreur mise √† jour ${key}:`, error);
      }
    }

    logger.info("‚úÖ Activation forc√©e du micro et de la cam√©ra termin√©e");
  } catch (error) {
    logger.error("‚ùå Erreur lors du for√ßage des param√®tres m√©dia:", error);
    throw error;
  }
};

/**
 * V√©rifie si les param√®tres m√©dia sont activ√©s
 */
export const checkMediaSettings = async (): Promise<{
  isMicEnabled: boolean;
  isVideoEnabled: boolean;
}> => {
  try {
    const recordingSettings = await AsyncStorage.getItem("recordingSettings");

    if (recordingSettings) {
      const parsed = JSON.parse(recordingSettings);
      return {
        isMicEnabled:
          parsed.isMicEnabled !== false && parsed.audioEnabled !== false,
        isVideoEnabled:
          parsed.isVideoEnabled !== false && parsed.videoEnabled !== false,
      };
    }

    // Par d√©faut, tout est activ√©
    return {
      isMicEnabled: true,
      isVideoEnabled: true,
    };
  } catch (error) {
    logger.error("‚ùå Erreur v√©rification param√®tres m√©dia:", error);
    // En cas d'erreur, on retourne true par d√©faut
    return {
      isMicEnabled: true,
      isVideoEnabled: true,
    };
  }
};

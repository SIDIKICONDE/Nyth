import AsyncStorage from "@react-native-async-storage/async-storage";
import eventsService from "./eventsService";
import { goalsService } from "./goalsService";
import { ExtendedNotificationSettings } from "../../../components/planning/settings/types";

/**
 * Charge les param√®tres de notification depuis le stockage local
 */
const loadNotificationSettings =
  async (): Promise<ExtendedNotificationSettings | null> => {
    try {
      const savedSettings = await AsyncStorage.getItem(
        "@planning_notification_settings"
      );
      if (savedSettings) {
        return JSON.parse(savedSettings);
      }
      return null;
    } catch (error) {
      return null;
    }
  };

/**
 * Analyse les habitudes de notification de l'utilisateur
 */
const analyzeNotificationHabits = (
  events: any[],
  goals: any[],
  notificationSettings: ExtendedNotificationSettings | null
) => {
  const now = new Date();
  const lastWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);

  // √âv√©nements r√©cents avec leurs horaires
  const recentEvents = events.filter((e) => new Date(e.createdAt) >= lastWeek);

  // Analyser les patterns temporels
  const eventsByHour = recentEvents.reduce((acc, event) => {
    const hour = new Date(event.startDate).getHours();
    acc[hour] = (acc[hour] || 0) + 1;
    return acc;
  }, {} as Record<number, number>);

  // Heures les plus actives
  const mostActiveHours = Object.entries(eventsByHour)
    .sort(([, a], [, b]) => (b as number) - (a as number))
    .slice(0, 3)
    .map(([hour]) => parseInt(hour));

  // Analyser la compl√©tion des √©v√©nements
  const completionRate =
    events.length > 0
      ? (events.filter((e) => e.status === "completed").length /
          events.length) *
        100
      : 0;

  // Analyser les retards
  const overdueEvents = events.filter(
    (e) =>
      e.status !== "completed" &&
      e.status !== "cancelled" &&
      new Date(e.endDate) < now
  );

  return {
    mostActiveHours,
    completionRate,
    overdueCount: overdueEvents.length,
    recentActivityLevel: recentEvents.length,
    needsMoreReminders: completionRate < 70 && overdueEvents.length > 2,
    suggestedReminderTimes:
      mostActiveHours.length > 0 ? mostActiveHours : [9, 14, 18], // d√©faut matin, apr√®s-midi, soir
  };
};

/**
 * G√©n√®re le contexte de notification pour l'IA
 */
const generateNotificationContext = (
  notificationSettings: ExtendedNotificationSettings | null,
  habits: any
): string => {
  if (!notificationSettings) {
    return `- Param√®tres de notification non configur√©s
- Seules les notifications PUSH sont disponibles (Email/SMS non impl√©ment√©s)
- L'IA peut sugg√©rer une configuration optimale bas√©e sur les habitudes de l'utilisateur
- Heures sugg√©r√©es pour les rappels: ${habits.suggestedReminderTimes.join(
      "h, "
    )}h
- Besoin de plus de rappels: ${
      habits.needsMoreReminders ? "Oui" : "Non"
    } (taux compl√©tion: ${habits.completionRate.toFixed(1)}%)`;
  }

  const smartFeatures = [];
  if (notificationSettings.smartNotifications?.enabled) {
    if (notificationSettings.smartNotifications.aiSuggestions)
      smartFeatures.push("Suggestions IA");
    if (notificationSettings.smartNotifications.habitBasedReminders)
      smartFeatures.push("Rappels adaptatifs");
    if (notificationSettings.smartNotifications.productivityInsights)
      smartFeatures.push("Insights productivit√©");
  }

  const activeReminders = [];
  if (notificationSettings.eventReminders?.enabled) {
    activeReminders.push(
      `√âv√©nements (${notificationSettings.eventReminders.defaultTiming.join(
        ", "
      )} min avant)`
    );
  }
  if (notificationSettings.goalReminders?.enabled) {
    const goalFeatures = [];
    if (notificationSettings.goalReminders.dailyProgress)
      goalFeatures.push("progr√®s quotidien");
    if (notificationSettings.goalReminders.weeklyReview)
      goalFeatures.push("r√©vision hebdomadaire");
    if (notificationSettings.goalReminders.overdueAlerts)
      goalFeatures.push("alertes retard");
    activeReminders.push(`Objectifs (${goalFeatures.join(", ")})`);
  }
  if (notificationSettings.taskReminders?.enabled) {
    activeReminders.push("T√¢ches activ√©s");
  }

  return `- Notifications configur√©es: ${
    notificationSettings.pushNotifications
      ? "Push (actives)"
      : "Push (d√©sactiv√©es)"
  } ${
    notificationSettings.emailNotifications
      ? "Email (configur√© mais non impl√©ment√©)"
      : ""
  } ${
    notificationSettings.smsNotifications
      ? "SMS (configur√© mais non impl√©ment√©)"
      : ""
  }
- Rappels actifs: ${
    activeReminders.length > 0 ? activeReminders.join(", ") : "Aucun"
  }
- Fonctionnalit√©s IA: ${
    smartFeatures.length > 0 ? smartFeatures.join(", ") : "D√©sactiv√©es"
  }
- Mode tranquillit√©: ${
    notificationSettings.quietHours?.enabled
      ? `${notificationSettings.quietHours.startTime}-${notificationSettings.quietHours.endTime}`
      : "D√©sactiv√©"
  }
- Habitudes d√©tect√©es: Actif aux heures ${habits.mostActiveHours.join("h, ")}h
- Taux de compl√©tion: ${habits.completionRate.toFixed(1)}% (${
    habits.overdueCount
  } en retard)
- Niveau d'activit√© r√©cent: ${
    habits.recentActivityLevel
  } √©v√©nements cette semaine
- L'IA peut optimiser les rappels selon ces habitudes et sugg√©rer des am√©liorations`;
};

/**
 * Obtient le contexte de planification pour l'IA
 */
export const getPlanningContextForAI = async (
  userId: string
): Promise<string> => {
  try {
    const [events, goals, notificationSettings] = await Promise.all([
      eventsService.getUserEvents(userId),
      goalsService.getUserGoals(userId),
      loadNotificationSettings(),
    ]);

    const now = new Date();

    // Analyser les habitudes de notification de l'utilisateur
    const notificationHabits = analyzeNotificationHabits(
      events,
      goals,
      notificationSettings
    );

    // M√©triques des √©v√©nements
    const eventMetrics = {
      total: events.length,
      completed: events.filter((e: any) => e.status === "completed").length,
      inProgress: events.filter((e: any) => e.status === "in_progress").length,
      planned: events.filter((e: any) => e.status === "planned").length,
      overdue: events.filter(
        (e: any) =>
          e.status !== "completed" &&
          e.status !== "cancelled" &&
          new Date(e.endDate) < now
      ).length,
    };

    // M√©triques des objectifs
    const goalMetrics = {
      total: goals.length,
      completed: goals.filter((g: any) => g.status === "completed").length,
      active: goals.filter((g: any) => g.status === "active").length,
    };

    // √âv√©nements en retard
    const overdueEvents = events.filter(
      (e: any) =>
        e.status !== "completed" &&
        e.status !== "cancelled" &&
        new Date(e.endDate) < now
    );

    // √âch√©ances dans les 7 prochains jours
    const nextWeek = new Date(now);
    nextWeek.setDate(nextWeek.getDate() + 7);

    const upcomingDeadlines = events.filter(
      (e: any) =>
        e.status !== "completed" &&
        e.status !== "cancelled" &&
        new Date(e.endDate) >= now &&
        new Date(e.endDate) <= nextWeek
    );

    const completionRate =
      eventMetrics.total > 0
        ? (eventMetrics.completed / eventMetrics.total) * 100
        : 0;

    // Suggestions
    const suggestions: string[] = [];

    if (overdueEvents.length > 0) {
      suggestions.push(
        `${overdueEvents.length} √©v√©nement(s) en retard n√©cessitent votre attention`
      );
    }

    if (upcomingDeadlines.length > 0) {
      suggestions.push(
        `${upcomingDeadlines.length} √©ch√©ance(s) approchent dans les 7 prochains jours`
      );
    }

    if (completionRate < 70 && eventMetrics.total > 5) {
      suggestions.push(
        "Taux de compl√©tion faible, r√©vision du planning recommand√©e"
      );
    }

    if (goalMetrics.active === 0 && goalMetrics.total > 0) {
      suggestions.push("Aucun objectif actif, r√©activation recommand√©e");
    }

    // Construire le contexte
    const context = `
üìÖ CONTEXTE DE PLANIFICATION (√âV√âNEMENTS & OBJECTIFS):

IMPORTANT: Ces donn√©es concernent uniquement les √âV√âNEMENTS DE PLANIFICATION (r√©unions, t√¢ches, rendez-vous) et les OBJECTIFS de productivit√©. 
Ne pas confondre avec les scripts vid√©o qui sont une fonctionnalit√© diff√©rente de l'application.

üìä STATISTIQUES DES √âV√âNEMENTS DE PLANIFICATION:
- Total d'√©v√©nements cr√©√©s: ${eventMetrics.total}
- √âv√©nements termin√©s: ${eventMetrics.completed}
- √âv√©nements en cours: ${eventMetrics.inProgress}
- √âv√©nements planifi√©s: ${eventMetrics.planned}
- √âv√©nements en retard: ${eventMetrics.overdue}
- Taux de compl√©tion: ${completionRate.toFixed(1)}%

üéØ STATISTIQUES DES OBJECTIFS:
- Total d'objectifs: ${goalMetrics.total}
- Objectifs termin√©s: ${goalMetrics.completed}
- Objectifs actifs: ${goalMetrics.active}

‚ö†Ô∏è ALERTES DE PLANIFICATION:
${
  overdueEvents.length > 0
    ? `- ${eventMetrics.overdue} √©v√©nement(s) en retard`
    : "- Aucun √©v√©nement en retard"
}
${
  upcomingDeadlines.length > 0
    ? `- ${upcomingDeadlines.length} √©ch√©ance(s) dans les 7 prochains jours`
    : "- Aucune √©ch√©ance urgente"
}

üí° SUGGESTIONS DE PLANIFICATION:
${
  suggestions.length > 0
    ? suggestions.map((s) => `- ${s}`).join("\n")
    : "- Aucune suggestion particuli√®re"
}

üìÖ √âV√âNEMENTS R√âCENTS (planification):
${events
  .slice(0, 5)
  .map(
    (e: any) =>
      `- ${e.title} (${e.status}) - ${new Date(e.endDate).toLocaleDateString()}`
  )
  .join("\n")}

üéØ OBJECTIFS ACTIFS:
${goals
  .filter((g: any) => g.status === "active")
  .slice(0, 3)
  .map(
    (g: any) =>
      `- ${g.title}: ${g.current}/${g.target} ${g.unit} (${g.progress}%)`
  )
  .join("\n")}

RAPPEL: Quand l'utilisateur demande des informations sur ses "√©v√©nements", il fait r√©f√©rence √† ses √©v√©nements de PLANIFICATION (r√©unions, t√¢ches, etc.), pas aux scripts vid√©o.

üîî CONTEXTE NOTIFICATIONS INTELLIGENTES:
${generateNotificationContext(notificationSettings, notificationHabits)}
`;

    return context.trim();
  } catch (error) {
    return `üìÖ CONTEXTE DE PLANIFICATION:
L'utilisateur utilise le syst√®me de planification de l'application pour organiser ses √©v√©nements et objectifs.
Tu peux l'aider avec la gestion du temps, la priorisation des t√¢ches, et l'optimisation de sa productivit√©.`;
  }
};

/**
 * Obtient le contexte des vid√©os pour l'IA
 */
export const getVideosContextForAI = async (user: any): Promise<string> => {
  try {
    if (!user) {
      return `üìπ CONTEXTE VID√âOS:
L'utilisateur n'est pas connect√©, impossible d'acc√©der aux vid√©os.`;
    }

    // Importer le service de stockage unifi√©
    const unifiedStorageService = (await import("../unifiedStorageService"))
      .default;

    // R√©cup√©rer les vid√©os et scripts
    const [recordings, scripts] = await Promise.all([
      unifiedStorageService.getRecordings(user),
      unifiedStorageService.getScripts(user),
    ]);

    // Calculer les m√©triques des vid√©os
    const videoMetrics = {
      total: recordings.length,
      withScript: recordings.filter((r) => r.scriptId).length,
      withoutScript: recordings.filter((r) => !r.scriptId).length,
      totalDuration: recordings.reduce((sum, r) => sum + (r.duration || 0), 0),
      averageDuration:
        recordings.length > 0
          ? Math.round(
              recordings.reduce((sum, r) => sum + (r.duration || 0), 0) /
                recordings.length
            )
          : 0,
    };

    // Calculer les m√©triques des scripts
    const scriptMetrics = {
      total: scripts.length,
      used: scripts.filter((s) => recordings.some((r) => r.scriptId === s.id))
        .length,
      unused: scripts.filter(
        (s) => !recordings.some((r) => r.scriptId === s.id)
      ).length,
    };

    // Formatage de la dur√©e totale
    const formatDuration = (seconds: number): string => {
      const hours = Math.floor(seconds / 3600);
      const minutes = Math.floor((seconds % 3600) / 60);
      const secs = seconds % 60;

      if (hours > 0) {
        return `${hours}h ${minutes}min ${secs}s`;
      } else if (minutes > 0) {
        return `${minutes}min ${secs}s`;
      } else {
        return `${secs}s`;
      }
    };

    // Vid√©os r√©centes (5 derni√®res)
    const recentVideos = recordings
      .sort(
        (a, b) =>
          new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
      )
      .slice(0, 5);

    // Scripts r√©cents (5 derniers)
    const recentScripts = scripts
      .sort(
        (a, b) =>
          new Date(b.updatedAt || b.createdAt).getTime() -
          new Date(a.updatedAt || a.createdAt).getTime()
      )
      .slice(0, 5);

    // Construire le contexte
    const context = `
üìπ CONTEXTE VID√âOS & SCRIPTS:

IMPORTANT: Ces donn√©es concernent les VID√âOS ENREGISTR√âES et les SCRIPTS VID√âO de l'application Naya.
Ne pas confondre avec les √©v√©nements de planification qui sont une fonctionnalit√© diff√©rente.

üìä STATISTIQUES DES VID√âOS:
- Total de vid√©os enregistr√©es: ${videoMetrics.total}
- Vid√©os avec script: ${videoMetrics.withScript}
- Vid√©os sans script: ${videoMetrics.withoutScript}
- Dur√©e totale: ${formatDuration(videoMetrics.totalDuration)}
- Dur√©e moyenne: ${formatDuration(videoMetrics.averageDuration)}

üìù STATISTIQUES DES SCRIPTS:
- Total de scripts cr√©√©s: ${scriptMetrics.total}
- Scripts utilis√©s pour vid√©os: ${scriptMetrics.used}
- Scripts non utilis√©s: ${scriptMetrics.unused}

üìπ VID√âOS R√âCENTES:
${
  recentVideos.length > 0
    ? recentVideos
        .map(
          (v) =>
            `- ${v.scriptTitle || "Sans titre"} (${formatDuration(
              v.duration || 0
            )}) - ${new Date(v.createdAt).toLocaleDateString()}`
        )
        .join("\n")
    : "- Aucune vid√©o enregistr√©e"
}

üìù SCRIPTS R√âCENTS:
${
  recentScripts.length > 0
    ? recentScripts
        .map(
          (s) =>
            `- "${s.title}" (${
              s.content ? Math.round(s.content.length / 100) * 100 : 0
            } caract√®res) - ${new Date(
              s.updatedAt || s.createdAt
            ).toLocaleDateString()}`
        )
        .join("\n")
    : "- Aucun script cr√©√©"
}

RAPPEL: Quand l'utilisateur demande des informations sur ses "vid√©os" ou "scripts", il fait r√©f√©rence aux contenus vid√©o de l'application Naya, pas aux √©v√©nements de planification.
`;

    return context.trim();
  } catch (error) {
    return `üìπ CONTEXTE VID√âOS:
L'utilisateur utilise l'application Naya pour cr√©er des scripts et enregistrer des vid√©os.
Tu peux l'aider avec la cr√©ation de contenu, l'organisation de ses scripts et la gestion de ses vid√©os.`;
  }
};

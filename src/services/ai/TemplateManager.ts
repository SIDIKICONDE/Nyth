import AsyncStorage from '@react-native-async-storage/async-storage';
import { AIPrompt } from '../../types/ai';
import { AIService } from './AIService';

/**
 * Interface pour un template de script
 */
export interface ScriptTemplate {
  id: string;
  name: string;
  description: string;
  structure: string[];
  systemPrompt: string;
  userPromptTemplate: string;
  icon?: string; // Emoji pour l'ic√¥ne
  category?: 'general' | 'social' | 'business' | 'educational' | 'creative';
  isDefault?: boolean; // True pour les templates par d√©faut
}

/**
 * Templates par d√©faut
 */
const DEFAULT_TEMPLATES: ScriptTemplate[] = [
  {
    id: 'hook-content-cta',
    name: 'Accroche + Contenu + Appel √† l\'action',
    description: 'Structure classique avec une accroche forte, du contenu de valeur et un appel √† l\'action clair',
    icon: 'üî•',
    category: 'general',
    isDefault: true,
    structure: ['hook', 'content', 'cta'],
    systemPrompt: `Tu es un expert en cr√©ation de scripts vid√©o. Cr√©e un script avec cette structure:
1. ACCROCHE (15%): Une introduction captivante qui attire l'attention
2. CONTENU (70%): Le contenu principal du sujet
3. APPEL √Ä L'ACTION (15%): Une conclusion avec un appel √† l'action clair`,
    userPromptTemplate: `Cr√©e un script sur "{{topic}}" suivant la structure accroche-contenu-cta. Le script doit √™tre facile √† lire √† voix haute, avec des phrases courtes et un ton naturel.`
  },
  {
    id: 'problem-solution-proof',
    name: 'Probl√®me + Solution + Preuve',
    description: 'Pr√©sente un probl√®me, propose une solution et fournit des preuves',
    icon: 'üí°',
    category: 'business',
    isDefault: true,
    structure: ['problem', 'solution', 'proof'],
    systemPrompt: `Tu es un expert en scripts de type probl√®me-solution. Cr√©e un script avec cette structure:
1. PROBL√àME (25%): Identifie clairement un probl√®me que rencontre le public
2. SOLUTION (50%): Pr√©sente une solution au probl√®me
3. PREUVE (25%): Fournis des preuves que la solution fonctionne`,
    userPromptTemplate: `Cr√©e un script sur "{{topic}}" avec la structure probl√®me-solution-preuve. Le script doit √™tre convaincant et centr√© sur l'auditoire.`
  },
  {
    id: 'storytelling',
    name: 'Narration (Storytelling)',
    description: 'Script bas√© sur une histoire captivante avec une morale ou le√ßon',
    icon: 'üìö',
    category: 'creative',
    isDefault: true,
    structure: ['setup', 'conflict', 'resolution'],
    systemPrompt: `Tu es un expert en storytelling. Cr√©e un script narratif avec cette structure:
1. MISE EN PLACE (30%): Introduis les personnages, le contexte
2. CONFLIT (40%): Pr√©sente un d√©fi ou probl√®me √† surmonter
3. R√âSOLUTION (30%): R√©sous le conflit avec une le√ßon √† retenir`,
    userPromptTemplate: `Cr√©e un script narratif sur "{{topic}}" qui raconte une histoire captivante avec une le√ßon claire √† la fin.`
  },
  {
    id: 'tutorial',
    name: 'Tutoriel pas-√†-pas',
    description: 'Instructions √©tape par √©tape pour apprendre quelque chose',
    icon: 'üìù',
    category: 'educational',
    isDefault: true,
    structure: ['intro', 'steps', 'conclusion'],
    systemPrompt: `Tu es un expert en tutoriels vid√©o. Cr√©e un script de tutoriel avec cette structure:
1. INTRODUCTION (15%): Pr√©sente le sujet et les objectifs d'apprentissage
2. √âTAPES (75%): Instructions d√©taill√©es √©tape par √©tape
3. CONCLUSION (10%): R√©capitule les points cl√©s et encourage la pratique`,
    userPromptTemplate: `Cr√©e un tutoriel pas-√†-pas sur "{{topic}}". Assure-toi que les √©tapes sont claires, concises et faciles √† suivre.`
  },
  {
    id: 'review',
    name: 'Avis & Critique',
    description: '√âvaluation objective d\'un produit, service ou contenu',
    icon: '‚≠ê',
    category: 'general',
    isDefault: true,
    structure: ['intro', 'positives', 'negatives', 'verdict'],
    systemPrompt: `Tu es un expert en critiques vid√©o. Cr√©e un script d'avis avec cette structure:
1. INTRODUCTION (15%): Pr√©sente ce qui est √©valu√©
2. POINTS POSITIFS (35%): Discute des aspects positifs
3. POINTS N√âGATIFS (35%): Discute des aspects n√©gatifs
4. VERDICT (15%): Donne une conclusion √©quilibr√©e et une recommandation`,
    userPromptTemplate: `Cr√©e un script d'avis sur "{{topic}}". Assure-toi d'√™tre √©quilibr√©, honn√™te et informatif dans ton √©valuation.`
  }
];

/**
 * Gestionnaire de templates pour les scripts
 */
export class TemplateManager {
  /**
   * Sauvegarde un template personnalis√©
   * @param template Le template √† sauvegarder
   */
  static async saveTemplate(template: ScriptTemplate): Promise<void> {
    try {
      const templates = await this.getTemplates();

      // V√©rifier si c'est une mise √† jour ou une cr√©ation
      const existingIndex = templates.findIndex(t => t.id === template.id);

      if (existingIndex >= 0) {
        // Mise √† jour d'un template existant
        templates[existingIndex] = {
          ...templates[existingIndex],
          ...template,
          isDefault: templates[existingIndex].isDefault // Pr√©server le statut par d√©faut
        };
      } else {
        // Cr√©ation d'un nouveau template
        templates.push({
          ...template,
          id: template.id || `template-${Date.now()}`,
          isDefault: false
        });
      }

      // Sauvegarder la liste mise √† jour
      await AsyncStorage.setItem('script_templates', JSON.stringify(templates));
    } catch (error) {
      throw new Error('Impossible de sauvegarder le template.');
    }
  }

  /**
   * R√©cup√®re tous les templates (par d√©faut + personnalis√©s)
   * @returns Liste des templates
   */
  static async getTemplates(): Promise<ScriptTemplate[]> {
    try {
      const templatesStr = await AsyncStorage.getItem('script_templates');
      
      // Si aucun template sauvegard√©, retourner les templates par d√©faut
      if (!templatesStr) {
        return DEFAULT_TEMPLATES;
      }
      
      // Fusionner les templates sauvegard√©s avec les templates par d√©faut
      const savedTemplates = JSON.parse(templatesStr) as ScriptTemplate[];
      
      // Filtrer les templates par d√©faut qui n'existent pas d√©j√† dans les templates sauvegard√©s
      const defaultTemplatesToAdd = DEFAULT_TEMPLATES.filter(
        defaultTemplate => !savedTemplates.some(
          savedTemplate => savedTemplate.id === defaultTemplate.id
        )
      );
      
      return [...savedTemplates, ...defaultTemplatesToAdd];
    } catch (error) {
      return DEFAULT_TEMPLATES;
    }
  }

  /**
   * Supprime un template personnalis√©
   * @param templateId ID du template √† supprimer
   */
  static async deleteTemplate(templateId: string): Promise<void> {
    try {
      const templates = await this.getTemplates();

      // V√©rifier si c'est un template par d√©faut
      const templateToDelete = templates.find(t => t.id === templateId);

      if (templateToDelete?.isDefault) {
        throw new Error('Impossible de supprimer un template par d√©faut.');
      }

      // Filtrer le template √† supprimer
      const updatedTemplates = templates.filter(t => t.id !== templateId);

      // Sauvegarder la liste mise √† jour
      await AsyncStorage.setItem('script_templates', JSON.stringify(updatedTemplates));
    } catch (error) {
      throw error;
    }
  }

  /**
   * G√©n√®re un script √† partir d'un template
   * @param templateId ID du template √† utiliser
   * @param topic Sujet du script
   * @param options Options suppl√©mentaires pour le prompt
   */
  static async generateFromTemplate(
    templateId: string, 
    topic: string, 
    options: Partial<AIPrompt> = {}
  ): Promise<string> {
    try {
      const templates = await this.getTemplates();
      const template = templates.find(t => t.id === templateId);
      
      if (!template) {
        throw new Error(`Template non trouv√©: ${templateId}`);
      }
      
      // Remplacer les variables dans le template
      const userPrompt = template.userPromptTemplate.replace('{{topic}}', topic);
      
      // G√©n√©rer le script avec le service AI
      const result = await AIService.generateWithCustomPrompt(
        template.systemPrompt,
        userPrompt,
        options
      );
      
      return result;
    } catch (error) {
      throw new Error('Impossible de g√©n√©rer le script √† partir du template.');
    }
  }
} 
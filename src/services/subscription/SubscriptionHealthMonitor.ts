import { createLogger } from "../../utils/optimizedLogger";
import subscriptionCacheService from "./SubscriptionCacheService";
import firestoreListenerOptimizer from "./FirestoreListenerOptimizer";
import { SystemHealthMetrics } from "../../types/subscriptionCache";

const logger = createLogger("SubscriptionHealthMonitor");

interface HealthCheckResult {
  service: string;
  status: 'healthy' | 'degraded' | 'unhealthy';
  message: string;
  metrics?: any;
  recommendations: string[];
}

/**
 * Service de monitoring de la sant√© du syst√®me d'abonnement
 * Surveille les performances et d√©tecte les probl√®mes
 */
class SubscriptionHealthMonitor {
  private static instance: SubscriptionHealthMonitor;
  private healthChecks: Map<string, HealthCheckResult> = new Map();
  private monitoringInterval?: NodeJS.Timeout;
  private isMonitoring = false;

  static getInstance(): SubscriptionHealthMonitor {
    if (!SubscriptionHealthMonitor.instance) {
      SubscriptionHealthMonitor.instance = new SubscriptionHealthMonitor();
    }
    return SubscriptionHealthMonitor.instance;
  }

  constructor() {
    this.startMonitoring();
  }

  /**
   * D√©marre le monitoring continu
   */
  startMonitoring(intervalMs: number = 30000): void {
    if (this.isMonitoring) return;

    this.isMonitoring = true;
    logger.info("üè• Monitoring de sant√© d√©marr√©");

    this.monitoringInterval = setInterval(() => {
      this.performHealthChecks();
    }, intervalMs);
  }

  /**
   * Arr√™te le monitoring
   */
  stopMonitoring(): void {
    if (this.monitoringInterval) {
      clearInterval(this.monitoringInterval);
      this.monitoringInterval = undefined;
    }
    this.isMonitoring = false;
    logger.info("üè• Monitoring de sant√© arr√™t√©");
  }

  /**
   * Effectue tous les checks de sant√©
   */
  private async performHealthChecks(): Promise<void> {
    try {
      const checks = await Promise.all([
        this.checkCacheHealth(),
        this.checkListenerHealth(),
        this.checkSubscriptionHealth(),
        this.checkMemoryHealth(),
        this.checkNetworkHealth(),
      ]);

      checks.forEach(check => {
        this.healthChecks.set(check.service, check);
      });

      this.logHealthStatus();
      this.takeCorrectiveActions();

    } catch (error) {
      logger.error("‚ùå Erreur lors des checks de sant√©:", error);
    }
  }

  /**
   * V√©rifie la sant√© du syst√®me de cache
   */
  private async checkCacheHealth(): Promise<HealthCheckResult> {
    const cacheStats = subscriptionCacheService.getCacheStats();
    const recommendations: string[] = [];

    let status: HealthCheckResult['status'] = 'healthy';
    let message = 'Cache fonctionne normalement';

    // V√©rifier le taux de succ√®s
    if (cacheStats.hitRate < 0.7) {
      status = 'degraded';
      message = 'Taux de succ√®s du cache faible';
      recommendations.push('Optimiser les strat√©gies de cache');
      recommendations.push('V√©rifier la dur√©e de vie des entr√©es');
    }

    // V√©rifier les entr√©es expir√©es
    const expiredRatio = cacheStats.expiredEntries / cacheStats.totalEntries;
    if (expiredRatio > 0.5) {
      status = 'degraded';
      message = 'Trop d\'entr√©es de cache expir√©es';
      recommendations.push('Ajuster les TTL des entr√©es de cache');
      recommendations.push('Am√©liorer la fr√©quence de nettoyage');
    }

    // V√©rifier le nombre total d'entr√©es
    if (cacheStats.totalEntries > 1000) {
      status = 'degraded';
      message = 'Nombre √©lev√© d\'entr√©es de cache';
      recommendations.push('Impl√©menter une strat√©gie d\'√©viction LRU');
      recommendations.push('R√©duire la dur√©e de vie des entr√©es');
    }

    return {
      service: 'cache',
      status,
      message,
      metrics: cacheStats,
      recommendations,
    };
  }

  /**
   * V√©rifie la sant√© des listeners Firestore
   */
  private async checkListenerHealth(): Promise<HealthCheckResult> {
    const listenerStats = firestoreListenerOptimizer.getStats();
    const recommendations: string[] = [];

    let status: HealthCheckResult['status'] = 'healthy';
    let message = 'Listeners Firestore fonctionnent normalement';

    // V√©rifier le nombre de connexions actives
    if (listenerStats.activeConnections > 50) {
      status = 'degraded';
      message = 'Nombre √©lev√© de connexions Firestore actives';
      recommendations.push('Optimiser les listeners avec batch processing');
      recommendations.push('Impl√©menter le debouncing des mises √† jour');
    }

    // V√©rifier le taux d'erreur
    const errorRate = listenerStats.errorRate || 0;
    if (errorRate > 0.1) {
      status = 'unhealthy';
      message = 'Taux d\'erreur des listeners √©lev√©';
      recommendations.push('V√©rifier la connectivit√© r√©seau');
      recommendations.push('Impl√©menter retry automatique');
      recommendations.push('Ajouter gestion d\'erreurs robuste');
    }

    // V√©rifier les groupes sans subscribers
    const emptyGroups = listenerStats.groups.filter(g => g.subscribers === 0);
    if (emptyGroups.length > 0) {
      recommendations.push(`Nettoyer ${emptyGroups.length} groupes sans subscribers`);
    }

    return {
      service: 'listeners',
      status,
      message,
      metrics: listenerStats,
      recommendations,
    };
  }

  /**
   * V√©rifie la sant√© globale des abonnements
   */
  private async checkSubscriptionHealth(): Promise<HealthCheckResult> {
    // Simuler des m√©triques d'abonnement
    // √Ä impl√©menter avec de vraies donn√©es
    const mockMetrics = {
      totalSubscriptions: 1250,
      activeSubscriptions: 1180,
      errorRate: 0.02,
      averageResponseTime: 150, // ms
    };

    const recommendations: string[] = [];
    let status: HealthCheckResult['status'] = 'healthy';
    let message = 'Service d\'abonnement fonctionne normalement';

    if (mockMetrics.errorRate > 0.05) {
      status = 'degraded';
      message = 'Taux d\'erreur des abonnements √©lev√©';
      recommendations.push('Investiguer les erreurs r√©currentes');
      recommendations.push('Am√©liorer la gestion d\'erreurs');
    }

    if (mockMetrics.averageResponseTime > 500) {
      status = 'degraded';
      message = 'Latence d\'abonnement √©lev√©e';
      recommendations.push('Optimiser les requ√™tes Firestore');
      recommendations.push('Am√©liorer le syst√®me de cache');
    }

    return {
      service: 'subscriptions',
      status,
      message,
      metrics: mockMetrics,
      recommendations,
    };
  }

  /**
   * V√©rifie l'utilisation m√©moire
   */
  private async checkMemoryHealth(): Promise<HealthCheckResult> {
    // Simuler v√©rification m√©moire
    // Dans un vrai environnement, utiliser performance.memory
    const mockMemoryUsage = {
      usedJSHeapSize: 25 * 1024 * 1024, // 25MB
      totalJSHeapSize: 100 * 1024 * 1024, // 100MB
      jsHeapSizeLimit: 200 * 1024 * 1024, // 200MB
    };

    const recommendations: string[] = [];
    let status: HealthCheckResult['status'] = 'healthy';
    let message = 'Utilisation m√©moire normale';

    const usagePercentage = mockMemoryUsage.usedJSHeapSize / mockMemoryUsage.jsHeapSizeLimit;

    if (usagePercentage > 0.8) {
      status = 'degraded';
      message = 'Utilisation m√©moire √©lev√©e';
      recommendations.push('Optimiser la taille du cache');
      recommendations.push('Impl√©menter garbage collection');
      recommendations.push('R√©duire les batch sizes');
    }

    return {
      service: 'memory',
      status,
      message,
      metrics: {
        usagePercentage: Math.round(usagePercentage * 100),
        usedMB: Math.round(mockMemoryUsage.usedJSHeapSize / 1024 / 1024),
        limitMB: Math.round(mockMemoryUsage.jsHeapSizeLimit / 1024 / 1024),
      },
      recommendations,
    };
  }

  /**
   * V√©rifie la sant√© r√©seau
   */
  private async checkNetworkHealth(): Promise<HealthCheckResult> {
    // Simuler v√©rification r√©seau
    const recommendations: string[] = [];
    let status: HealthCheckResult['status'] = 'healthy';
    let message = 'Connectivit√© r√©seau normale';

    // √Ä impl√©menter avec NetInfo ou des ping vers Firestore
    const isOnline = true; // Simuler
    const latency = 50; // ms simul√©

    if (!isOnline) {
      status = 'unhealthy';
      message = 'Probl√®me de connectivit√© r√©seau';
      recommendations.push('V√©rifier la connexion internet');
      recommendations.push('Activer le mode hors ligne');
    }

    if (latency > 200) {
      status = 'degraded';
      message = 'Latence r√©seau √©lev√©e';
      recommendations.push('Optimiser les requ√™tes Firestore');
      recommendations.push('Utiliser plus de cache local');
    }

    return {
      service: 'network',
      status,
      message,
      metrics: { isOnline, latency },
      recommendations,
    };
  }

  /**
   * Log le statut de sant√© global
   */
  private logHealthStatus(): void {
    const services = Array.from(this.healthChecks.values());
    const unhealthy = services.filter(s => s.status === 'unhealthy');
    const degraded = services.filter(s => s.status === 'degraded');
    const healthy = services.filter(s => s.status === 'healthy');

    if (unhealthy.length > 0) {
      logger.error(`üö® ${unhealthy.length} services non sains:`, unhealthy.map(s => s.service));
    }

    if (degraded.length > 0) {
      logger.warn(`‚ö†Ô∏è ${degraded.length} services d√©grad√©s:`, degraded.map(s => s.service));
    }

    if (healthy.length === services.length) {
      logger.info(`‚úÖ Tous les ${services.length} services sont sains`);
    }
  }

  /**
   * Prend des actions correctives automatiques
   */
  private async takeCorrectiveActions(): Promise<void> {
    const services = Array.from(this.healthChecks.values());

    for (const service of services) {
      if (service.status === 'unhealthy') {
        await this.handleUnhealthyService(service);
      } else if (service.status === 'degraded') {
        await this.handleDegradedService(service);
      }
    }
  }

  /**
   * G√®re un service non sain
   */
  private async handleUnhealthyService(service: HealthCheckResult): Promise<void> {
    logger.error(`üö® Action corrective pour service ${service.service}: ${service.message}`);

    switch (service.service) {
      case 'cache':
        // Recr√©er le cache
        logger.info('üîÑ Reconstruction du cache...');
        break;

      case 'listeners':
        // Recr√©er les listeners
        firestoreListenerOptimizer.cleanupAll();
        logger.info('üîÑ Reconstruction des listeners...');
        break;

      case 'network':
        // Basculer en mode hors ligne
        logger.info('üîÑ Activation du mode hors ligne...');
        break;
    }
  }

  /**
   * G√®re un service d√©grad√©
   */
  private async handleDegradedService(service: HealthCheckResult): Promise<void> {
    logger.warn(`‚ö†Ô∏è Optimisation pour service ${service.service}: ${service.message}`);

    // Appliquer les recommandations automatisables
    for (const recommendation of service.recommendations) {
      if (recommendation.includes('Nettoyer') && recommendation.includes('groupes')) {
        firestoreListenerOptimizer.cleanupAll();
      }
    }
  }

  /**
   * Obtient le statut de sant√© global
   */
  getOverallHealth(): SystemHealthMetrics {
    const cacheHealth = this.healthChecks.get('cache')?.metrics || {};
    const listenerHealth = this.healthChecks.get('listeners')?.metrics || {};
    const subscriptionHealth = this.healthChecks.get('subscriptions')?.metrics || {};

    const services = Array.from(this.healthChecks.values());
    const unhealthyCount = services.filter(s => s.status === 'unhealthy').length;
    const degradedCount = services.filter(s => s.status === 'degraded').length;

    let overallHealth: SystemHealthMetrics['overallHealth'] = 'healthy';
    if (unhealthyCount > 0) overallHealth = 'unhealthy';
    else if (degradedCount > 0) overallHealth = 'degraded';

    const allRecommendations = services.flatMap(s => s.recommendations);

    return {
      cacheHealth,
      listenerHealth,
      subscriptionHealth,
      overallHealth,
      timestamp: Date.now(),
      recommendations: allRecommendations,
    };
  }

  /**
   * Obtient le d√©tail de tous les checks de sant√©
   */
  getDetailedHealth(): HealthCheckResult[] {
    return Array.from(this.healthChecks.values());
  }

  /**
   * Force un check de sant√© imm√©diat
   */
  async forceHealthCheck(): Promise<SystemHealthMetrics> {
    await this.performHealthChecks();
    return this.getOverallHealth();
  }
}

export const subscriptionHealthMonitor = SubscriptionHealthMonitor.getInstance();
export default subscriptionHealthMonitor;
